{"version":3,"sources":["../../src/common/InterferenceGameEngine.js"],"names":["InterferenceGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","autoResolve","Object","assign","playerWidth","playerHeight","eggHPRange","eggHPMin","startingAmmo","reloadSize","leftBound","topBound","bottomBound","transportSyncInterval","eggRadius","eggBaseXVelocity","palettes","paletteAttributes","scale","gridWidth","gridHeight","melody","subdivision","length","bass","perc","shadowIdCount","clientIDSpace","rooms","playersByRoom","eggsByRoom","rightBoundByRoom","on","preStepLogic","bind","postStepLogic","id","shadowObj","keys","world","objects","localId","Number","serverObj","hasOwnProperty","inputId","removeObjectFromWorld","serializer","registerClass","Note","Performer","Egg","roomName","x","Math","random","y","TwoVector","stepInfo","groupBy","queryObjects","instanceType","r","quantizedMovement","resolveCollisions","gameLogic","e","position","velocity","emit","hp","broken","p","number","rightBound","divX","divY","cellX","floor","cellY","cell","quantizedPosition","playerCellX","playerCellY","arr","property","reduce","grouped","current","push","query","queriedNotes","note","conditions","k","every","value","isServer","inputData","playerId","player","queryObject","players","_roomName","eggs","eggsByType","stage","input","newNumber","positionIsInPlayer","playerHitEgg","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, SimplePhysicsEngine, TwoVector } from 'lance-gg';\nimport Note from './Note';\nimport Performer from './Performer';\nimport Egg from './Egg';\n\n//const palettes = ['rain', 'celeste', 'pyre', 'journey', 'kirby'];\n\nexport default class InterferenceGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n        this.physicsEngine = new SimplePhysicsEngine({\n            gameEngine: this,\n            collisions: { autoResolve: false }\n        });\n\n        // game constants\n        Object.assign(this, {\n            // map: { setup: { variations: [0]['intro'], \n            // intro: ['buildMelody', 'buildBass', 'buildPerc'],\n            // buildMelody: ['fight']\n            // fight\n            // },\n            playerWidth: 16, playerHeight: 9, \n            eggHPRange: 4, eggHPMin: 3, startingAmmo: 2, reloadSize: 2,\n            leftBound: 0, topBound: 0, bottomBound: 9,\n            transportSyncInterval: 200, eggRadius: 1, eggBaseXVelocity: 0.15,\n            palettes: [1, 2, 3, 4, 5],\n            paletteAttributes: [\n                { //default\n                    scale: [0, 2, 4, 5, 7], \n                    gridWidth: 0,\n                    gridHeight: 0,\n                    melody: {\n                        subdivision: '1n',\n                        length: 0\n                    },\n                    bass: {\n                        subdivision: '1n',\n                        length: 0\n                    },\n                    perc: {\n                        subdivision: '1n',\n                        length: 0\n                    }\n                },\n                { //rain\n                    scale: [0, 4, 6, 9, 11], \n                    gridWidth: 16,\n                    gridHeight: 9,\n                    melody: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    bass: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    perc: {\n                        subdivision: '16n',\n                        length: 16\n                    }\n                },\n                { //celeste\n                    scale: [0, 2, 3, 5, 7], \n                    gridWidth: 16,\n                    gridHeight: 9,\n                    melody: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    bass: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    perc: {\n                        subdivision: '16n',\n                        length: 16\n                    }\n                },\n                { //pyre\n                    scale: [0, 2, 3, 7, 10], \n                    gridWidth: 16,\n                    gridHeight: 9,\n                    melody: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    bass: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    perc: {\n                        subdivision: '16n',\n                        length: 16\n                    }\n                },\n                { //journey\n                    scale: [0, 2, 4, 7, 9], \n                    gridWidth: 16,\n                    gridHeight: 9,\n                    melody: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    bass: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    perc: {\n                        subdivision: '16n',\n                        length: 16\n                    }\n                },\n                { //kirby\n                    scale: [0, 2, 4, 5, 7], \n                    gridWidth: 16,\n                    gridHeight: 9,\n                    melody: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    bass: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    perc: {\n                        subdivision: '16n',\n                        length: 16\n                    }\n                }\n            ]\n        });\n\n        // game variables\n        Object.assign(this, {\n            shadowIdCount: this.options.clientIDSpace, \n            rooms: [], playersByRoom: {}, eggsByRoom: {}, rightBoundByRoom: {}\n        });\n\n        this.on('preStep', this.preStepLogic.bind(this));\n        this.on('postStep', this.postStepLogic.bind(this));\n    }\n\n    getNewShadowId() {\n        let id = this.shadowIdCount;\n        this.shadowIdCount++;\n        return id;\n    }\n\n    // based on lance findLocalShadow; instead of finding the shadow of a server obj,\n    // looks for the server copy of a shadow obj, and removes the shadow if the server copy if found\n    resolveShadowObject(shadowObj) {\n        for (let localId of Object.keys(this.world.objects)) {\n            if (Number(localId) >= this.options.clientIDSpace) continue;\n            let serverObj = this.world.objects[localId];\n            if (serverObj.hasOwnProperty('inputId') && serverObj.inputId === shadowObj.inputId) {\n                this.removeObjectFromWorld(shadowObj.id);\n                return serverObj;\n            }\n        }\n        return null;\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Note);\n        serializer.registerClass(Performer);\n        serializer.registerClass(Egg);\n    }\n\n    start() {\n        super.start();\n    }\n\n    randPos(roomName) {\n        let x = Math.random() * this.playerWidth * this.playersByRoom[roomName].length;\n        let y = Math.random() * this.playerHeight;\n        return new TwoVector(x, y);\n    }\n\n    velRandY() {\n        let y = (Math.random() - 0.5) * this.eggBaseXVelocity;\n        return new TwoVector(this.eggBaseXVelocity, y);\n    }\n\n    preStepLogic(stepInfo) {\n        this.playersByRoom = this.groupBy(this.world.queryObjects({ instanceType: Performer }), \"_roomName\");\n        this.rooms = Object.keys(this.playersByRoom);\n        this.eggsByRoom = this.groupBy(this.world.queryObjects({ instanceType: Egg }), \"_roomName\");\n        this.rightBoundByRoom = {};\n        for (let r of this.rooms) {\n            this.rightBoundByRoom[r] = this.playersByRoom[r].length * this.playerWidth;\n        }\n    }\n\n    postStepLogic(stepInfo) {\n        for (let r of this.rooms) {\n            this.quantizedMovement(r);\n            this.resolveCollisions(r);\n            this.gameLogic(r);\n        }\n    }\n\n    quantizedMovement(r) {\n        if (this.eggsByRoom[r]) {\n            for (let e of this.eggsByRoom[r]) {\n\n            }\n        }\n\n    }\n\n    resolveCollisions(r) {\n        /*\n        if (stepInfo.isReenact)\n            return;\n        */\n\n        if (this.eggsByRoom[r]) {\n            for (let e of this.eggsByRoom[r]) {\n                // bounce off walls\n                if ((e.position.x - this.eggRadius) < this.leftBound) {\n                    e.velocity.x *= -1;\n                    e.position.x = this.leftBound + this.eggRadius;\n                    this.emit('eggBounce', e);\n                } \n                else if ((e.position.x + this.eggRadius) > this.rightBoundByRoom[r]) {\n                    e.velocity.x *= -1;\n                    e.position.x = this.rightBoundByRoom[r] - this.eggRadius;\n                    this.emit('eggBounce', e);\n                }\n                if ((e.position.y - this.eggRadius) < this.topBound) {\n                    e.velocity.y *= -1\n                    e.position.y = this.topBound + this.eggRadius;\n                    this.emit('eggBounce', e);\n                }\n                else if ((e.position.y + this.eggRadius) > this.bottomBound) {\n                    e.velocity.y *= -1\n                    e.position.y = this.bottomBound - this.eggRadius;\n                    this.emit('eggBounce', e);\n                }\n                // check if broken\n                if (e.hp <= 0 && !e.broken) {\n                    e.broken = true;\n                    this.emit('eggBroke', e);\n                }\n            }\n        }\n        \n                        /*\n        this.world.forEachObject((id, obj) => {\n            if (obj instanceof Egg) {\n\n                // if the position changed, add a body part and trim the length\n                let pos = obj.position.clone();\n                if (obj.bodyParts.length === 0 || pos.subtract(obj.bodyParts[obj.bodyParts.length-1]).length() > 0.05) {\n                    obj.bodyParts.push(obj.position.clone());\n                    while (obj.bodyLength < obj.bodyParts.length) obj.bodyParts.shift();\n                }\n\n                // if not stopped, move along\n                if (obj.direction === this.directionStop) return;\n                let move = new TwoVector(Math.cos(obj.direction), Math.sin(obj.direction));\n                move.multiplyScalar(0.05);\n                obj.position.add(move);\n                obj.position.y = Math.min(obj.position.y, this.spaceHeight / 2);\n                obj.position.y = Math.max(obj.position.y, -this.spaceHeight / 2);\n                obj.position.x = Math.min(obj.position.x, this.spaceWidth / 2);\n                obj.position.x = Math.max(obj.position.x, -this.spaceWidth / 2);\n\n            }\n        });                */\n    }\n\n    gameLogic(r) {\n        if (this.eggsByRoom[r]) {\n            for (let e of this.eggsByRoom[r]) {\n                if (e.hp <= 0) {\n                    e.velocity.x = 0;\n                    e.velocity.y = 0;\n                }\n            }\n        }\n    }\n\n    positionIsInPlayer(x, p) {\n        let leftBound = p.number * this.playerWidth;\n        let rightBound = (p.number + 1) * this.playerWidth;\n        return (leftBound < x && x < rightBound);\n    }\n\n    quantizedPosition(x, y, divX, divY) {\n        let cellX = Math.floor(x / (this.playerWidth / divX)) * (this.playerWidth / divX);\n        let cellY = Math.floor(y / (this.playerHeight / divY)) * (this.playerHeight / divY);\n        return [cellX, cellY];\n    }\n\n    playerQuantizedPosition(p, x, y, divX, divY) {\n        let cell = this.quantizedPosition(x, y, divX, divY);\n        let playerCellX = cell[0] - (p.number * divX);\n        let playerCellY = cell[1];\n        return [playerCellX, playerCellY];\n    }\n\n    groupBy(arr, property) {\n        return arr.reduce((grouped, current) => {\n            if (!grouped[current[property]]) grouped[current[property]] = [];\n            grouped[current[property]].push(current);\n            return grouped;\n        }, {});\n    }\n\n    // based on lance GameWorld.queryObjects\n    queryNotes(query) {\n        let queriedNotes = [];\n        for (let note of this.world.queryObjects({ instanceType: Note })) {\n            let conditions = [];\n\n            for (let k of Object.keys(query)) {\n                conditions.push(!(k in query) || query[k] !== null && note[k] === query[k]);\n            }\n\n            // all conditions are true, object is qualified for the query\n            if (conditions.every(value => value)) {\n                queriedNotes.push(note);\n            }\n        }\n        return queriedNotes;\n    }\n\n    playerHitEgg(p, e, isServer) {\n        this.emit('playerHitEgg', e);\n    }\n\n    processInput(inputData, playerId, isServer) {\n\n        super.processInput(inputData, playerId);\n        \n        let player = this.world.queryObject({ playerId });\n        let players = this.playersByRoom[player._roomName];\n        let eggs = this.eggsByRoom[player._roomName];\n        let eggsByType = {};\n        if (eggs) {\n            eggsByType = this.groupBy(eggs, 'sound');\n        }\n\n        if (player.stage === 'setup') {\n            //TODO need to update a bunch of stuff on a color change, \n            // also need to be careful when referencing the player palette vs a cell palette, player palette should not change after setup?\n            if (inputData.input == 'c') {\n                this.emit('updatePalette');\n            }\n            else if (isServer) { \n            // stuff that should only be processed on the server, such as randomness, which would otherwise cause discrepancies\n            // or actions that require more info than is available to one player\n            //console.log(inputData.input);\n                if (inputData.input == 'b') {\n                    this.emit('beginPerformance', player);\n                }\n                else if (inputData.input == '[') {\n                    let newNumber = player.number - 1;\n                    if (newNumber < 0) newNumber = players.length - 1;\n                    for (let p of players) { \n                        if (p.number === newNumber) p.number = player.number; \n                    }\n                    player.number = newNumber;\n                }\n                else if (inputData.input == ']') {\n                    let newNumber = player.number + 1;\n                    if (newNumber >= players.length) newNumber = 0;\n                    for (let p of players) { \n                        if (p.number === newNumber) p.number = player.number; \n                    }\n                    player.number = newNumber;\n                } \n            }\n        }\n        else if (player.stage === 'intro') {\n            if (inputData.input == 'q') {\n                for (let e of eggsByType.melody) {\n                    if (this.positionIsInPlayer(e.position.x, player)) {\n                        this.playerHitEgg(player, e, isServer);\n                    }\n                }\n            }\n            if (inputData.input == 'w') {\n                for (let e of eggsByType.perc) {\n                    if (this.positionIsInPlayer(e.position.x, player)) {\n                        this.playerHitEgg(player, e, isServer);\n                    }\n                }\n            }\n            if (inputData.input == 'e') {\n                for (let e of eggsByType.bass) {\n                    if (this.positionIsInPlayer(e.position.x, player)) {\n                        this.playerHitEgg(player, e, isServer);\n                    }\n                }\n            }\n        }\n        /*\n        else if (inputData.input == 'n') {\n            let scale = paletteAttributes.scale[player.palette];\n            player.notestack = player.notestack.concat(\n                String.fromCharCode(scale[Math.floor(Math.random() * scale.length)])\n            );\n            console.log(player.notestack);\n        } */\n    }\n}\n"],"file":"InterferenceGameEngine.js"}