{"version":3,"sources":["../../src/common/InterferenceGameEngine.js"],"names":["InterferenceGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","autoResolve","Object","assign","playerWidth","playerHeight","eggSounds","eggHPRange","eggHPMin","startingAmmo","reloadSize","leftBound","topBound","bottomBound","transportSyncInterval","eggRadius","eggBaseXVelocity","palettes","paletteAttributes","scale","gridWidth","gridHeight","melody","subdivision","length","bass","perc","shadowIdCount","clientIDSpace","rooms","playersByRoom","eggsByRoom","rightBoundByRoom","eggSoundsToUse","slice","on","preStepLogic","bind","postStepLogic","id","shadowObj","keys","world","objects","localId","Number","serverObj","hasOwnProperty","inputId","removeObjectFromWorld","serializer","registerClass","Note","Performer","Egg","n","mod","roomName","x","Math","random","y","TwoVector","stepInfo","groupBy","queryObjects","instanceType","r","resolveCollisions","gameLogic","e","position","velocity","emit","hp","broken","p","number","rightBound","divX","divY","cellX","floor","cellY","cell","quantizedPosition","playerCellX","playerCellY","arr","property","reduce","grouped","current","push","query","queriedPlayers","conditions","k","every","value","isServer","queriedNotes","note","inputData","playerId","player","queryObject","players","_roomName","eggs","eggsByType","stage","input","newNumber","move","positionIsInPlayer","playerHitEgg","paint","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, SimplePhysicsEngine, TwoVector } from 'lance-gg';\nimport Note from './Note';\nimport Performer from './Performer';\nimport Egg from './Egg';\n\n//const palettes = ['rain', 'celeste', 'pyre', 'journey', 'kirby'];\n\nexport default class InterferenceGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n        this.physicsEngine = new SimplePhysicsEngine({\n            gameEngine: this,\n            collisions: { autoResolve: false }\n        });\n\n        // game constants\n        Object.assign(this, {\n            // map: { setup: { variations: [0]['intro'], \n            // intro: ['buildMelody', 'buildBass', 'buildPerc'],\n            // buildMelody: ['fight']\n            // fight\n            // },\n            playerWidth: 16, playerHeight: 9, \n            eggSounds: ['melody', 'bass', 'perc'], eggHPRange: 4, eggHPMin: 3, startingAmmo: 2, reloadSize: 2,\n            leftBound: 0, topBound: 0, bottomBound: 9,\n            transportSyncInterval: 200, eggRadius: 1, eggBaseXVelocity: 0.15,\n            palettes: [1, 2, 3, 4, 5],\n            paletteAttributes: [\n                { //default\n                    scale: [0, 2, 4, 5, 7], \n                    gridWidth: 1,\n                    gridHeight: 1,\n                    melody: {\n                        subdivision: '1n',\n                        length: 0\n                    },\n                    bass: {\n                        subdivision: '1n',\n                        length: 0\n                    },\n                    perc: {\n                        subdivision: '1n',\n                        length: 0\n                    }\n                },\n                { //rain\n                    scale: [0, 4, 6, 9, 11], \n                    gridWidth: 16,\n                    gridHeight: 9,\n                    melody: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    bass: {\n                        subdivision: '8n',\n                        length: 16\n                    },\n                    perc: {\n                        subdivision: '16n',\n                        length: 16\n                    }\n                },\n                { //celeste\n                    scale: [0, 2, 3, 5, 7], \n                    gridWidth: 16,\n                    gridHeight: 9,\n                    melody: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    bass: {\n                        subdivision: '8n',\n                        length: 16\n                    },\n                    perc: {\n                        subdivision: '16n',\n                        length: 16\n                    }\n                },\n                { //pyre\n                    scale: [0, 2, 3, 7, 10], \n                    gridWidth: 16,\n                    gridHeight: 9,\n                    melody: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    bass: {\n                        subdivision: '8n',\n                        length: 16\n                    },\n                    perc: {\n                        subdivision: '16n',\n                        length: 16\n                    }\n                },\n                { //journey\n                    scale: [0, 2, 4, 7, 9], \n                    gridWidth: 16,\n                    gridHeight: 9,\n                    melody: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    bass: {\n                        subdivision: '8n',\n                        length: 16\n                    },\n                    perc: {\n                        subdivision: '16n',\n                        length: 16\n                    }\n                },\n                { //kirby\n                    scale: [0, 2, 4, 5, 7], \n                    gridWidth: 16,\n                    gridHeight: 9,\n                    melody: {\n                        subdivision: '16n',\n                        length: 16\n                    },\n                    bass: {\n                        subdivision: '8n',\n                        length: 16\n                    },\n                    perc: {\n                        subdivision: '16n',\n                        length: 16\n                    }\n                }\n            ]\n        });\n\n        // game variables\n        Object.assign(this, {\n            shadowIdCount: this.options.clientIDSpace, \n            rooms: [], playersByRoom: {}, eggsByRoom: {}, rightBoundByRoom: {},\n            eggSoundsToUse: this.eggSounds.slice()\n        });\n\n        this.on('preStep', this.preStepLogic.bind(this));\n        this.on('postStep', this.postStepLogic.bind(this));\n    }\n\n    getNewShadowId() {\n        let id = this.shadowIdCount;\n        this.shadowIdCount++;\n        return id;\n    }\n\n    // based on lance findLocalShadow; instead of finding the shadow of a server obj,\n    // looks for the server copy of a shadow obj, and removes the shadow if the server copy if found\n    resolveShadowObject(shadowObj) {\n        for (let localId of Object.keys(this.world.objects)) {\n            if (Number(localId) >= this.options.clientIDSpace) continue;\n            let serverObj = this.world.objects[localId];\n            if (serverObj.hasOwnProperty('inputId') && serverObj.inputId === shadowObj.inputId) {\n                this.removeObjectFromWorld(shadowObj.id);\n                return serverObj;\n            }\n        }\n        return null;\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Note);\n        serializer.registerClass(Performer);\n        serializer.registerClass(Egg);\n    }\n\n    start() {\n        super.start();\n    }\n\n    wrap(n, mod) {\n        return (n % mod + mod) % mod;\n    }\n\n    randPos(roomName) {\n        let x = Math.random() * this.playerWidth * this.playersByRoom[roomName].length;\n        let y = Math.random() * this.playerHeight;\n        return new TwoVector(x, y);\n    }\n\n    velRandY() {\n        let y = (Math.random() - 0.5) * this.eggBaseXVelocity;\n        return new TwoVector(this.eggBaseXVelocity, y);\n    }\n\n    preStepLogic(stepInfo) {\n        this.playersByRoom = this.groupBy(this.world.queryObjects({ instanceType: Performer }), '_roomName');\n        this.rooms = Object.keys(this.playersByRoom);\n        this.eggsByRoom = this.groupBy(this.world.queryObjects({ instanceType: Egg }), '_roomName');\n        this.rightBoundByRoom = {};\n        for (let r of this.rooms) {\n            this.rightBoundByRoom[r] = this.playersByRoom[r].length * this.playerWidth;\n        }\n    }\n\n    postStepLogic(stepInfo) {\n        for (let r of this.rooms) {\n            this.resolveCollisions(r);\n            this.gameLogic(r);\n        }\n    }\n\n    resolveCollisions(r) {\n        /*\n        if (stepInfo.isReenact)\n            return;\n        */\n\n        if (this.eggsByRoom[r]) {\n            for (let e of this.eggsByRoom[r]) {\n                // bounce off walls\n                if ((e.position.x - this.eggRadius) < this.leftBound) {\n                    e.velocity.x *= -1;\n                    e.position.x = this.leftBound + this.eggRadius;\n                    this.emit('eggBounce', e);\n                } \n                else if ((e.position.x + this.eggRadius) > this.rightBoundByRoom[r]) {\n                    e.velocity.x *= -1;\n                    e.position.x = this.rightBoundByRoom[r] - this.eggRadius;\n                    this.emit('eggBounce', e);\n                }\n                if ((e.position.y - this.eggRadius) < this.topBound) {\n                    e.velocity.y *= -1\n                    e.position.y = this.topBound + this.eggRadius;\n                    this.emit('eggBounce', e);\n                }\n                else if ((e.position.y + this.eggRadius) > this.bottomBound) {\n                    e.velocity.y *= -1\n                    e.position.y = this.bottomBound - this.eggRadius;\n                    this.emit('eggBounce', e);\n                }\n                // check if broken\n                if (e.hp <= 0 && !e.broken) {\n                    e.broken = true;\n                    this.emit('eggBroke', e);\n                }\n            }\n        }\n        \n                        /*\n        this.world.forEachObject((id, obj) => {\n            if (obj instanceof Egg) {\n\n                // if the position changed, add a body part and trim the length\n                let pos = obj.position.clone();\n                if (obj.bodyParts.length === 0 || pos.subtract(obj.bodyParts[obj.bodyParts.length-1]).length() > 0.05) {\n                    obj.bodyParts.push(obj.position.clone());\n                    while (obj.bodyLength < obj.bodyParts.length) obj.bodyParts.shift();\n                }\n\n                // if not stopped, move along\n                if (obj.direction === this.directionStop) return;\n                let move = new TwoVector(Math.cos(obj.direction), Math.sin(obj.direction));\n                move.multiplyScalar(0.05);\n                obj.position.add(move);\n                obj.position.y = Math.min(obj.position.y, this.spaceHeight / 2);\n                obj.position.y = Math.max(obj.position.y, -this.spaceHeight / 2);\n                obj.position.x = Math.min(obj.position.x, this.spaceWidth / 2);\n                obj.position.x = Math.max(obj.position.x, -this.spaceWidth / 2);\n\n            }\n        });                */\n    }\n\n    gameLogic(r) {\n        if (this.eggsByRoom[r]) {\n            for (let e of this.eggsByRoom[r]) {\n                if (e.hp <= 0) {\n                    e.velocity.x = 0;\n                    e.velocity.y = 0;\n                }\n            }\n        }\n    }\n\n    positionIsInPlayer(x, p) {\n        let leftBound = p.number * this.playerWidth;\n        let rightBound = (p.number + 1) * this.playerWidth;\n        return (leftBound < x && x < rightBound);\n    }\n\n    quantizedPosition(x, y, divX, divY) {\n        let cellX = Math.floor(x / (this.playerWidth / divX)) * (this.playerWidth / divX);\n        let cellY = Math.floor(y / (this.playerHeight / divY)) * (this.playerHeight / divY);\n        return [cellX, cellY];\n    }\n\n    playerQuantizedPosition(p, x, y, divX, divY) {\n        let cell = this.quantizedPosition(x, y, divX, divY);\n        let playerCellX = cell[0] - (p.number * divX);\n        let playerCellY = cell[1];\n        return [playerCellX, playerCellY];\n    }\n\n    groupBy(arr, property) {\n        return arr.reduce((grouped, current) => {\n            if (!grouped[current[property]]) grouped[current[property]] = [];\n            grouped[current[property]].push(current);\n            return grouped;\n        }, {});\n    }\n\n    // based on lance GameWorld.queryObjects\n    queryPlayers(query) {\n        let queriedPlayers = [];\n        for (let p of this.world.queryObjects({ instanceType: Performer })) {\n            let conditions = [];\n\n            for (let k of Object.keys(query)) {\n                conditions.push(!(k in query) || query[k] !== null && p[k] === query[k]);\n            }\n\n            // all conditions are true, object is qualified for the query\n            if (conditions.every(value => value)) {\n                queriedPlayers.push(p);\n            }\n        }\n        return queriedPlayers;\n    }\n\n    playerHitEgg(p, e, isServer) {\n        this.emit('playerHitEgg', e);\n    }\n\n    // based on lance GameWorld.queryObjects\n    queryNotes(query) {\n        let queriedNotes = [];\n        for (let note of this.world.queryObjects({ instanceType: Note })) {\n            let conditions = [];\n\n            for (let k of Object.keys(query)) {\n                conditions.push(!(k in query) || query[k] !== null && note[k] === query[k]);\n            }\n\n            // all conditions are true, object is qualified for the query\n            if (conditions.every(value => value)) {\n                queriedNotes.push(note);\n            }\n        }\n        return queriedNotes;\n    }\n\n    playerHitEgg(p, e, isServer) {\n        this.emit('playerHitEgg', e);\n    }\n\n    processInput(inputData, playerId, isServer) {\n\n        super.processInput(inputData, playerId);\n        \n        let player = this.world.queryObject({ playerId });\n        let players = this.playersByRoom[player._roomName];\n        let eggs = this.eggsByRoom[player._roomName];\n        let eggsByType = {};\n        if (eggs) {\n            eggsByType = this.groupBy(eggs, 'sound');\n        }\n\n        if (player.stage === 'setup') {\n            //TODO need to update a bunch of stuff on a color change, \n            // also need to be careful when referencing the player palette vs a cell palette, player palette should not change after setup?\n            if (inputData.input == 'c') {\n                this.emit('updatePalette');\n            }\n            else if (isServer) { \n            // stuff that should only be processed on the server, such as randomness, which would otherwise cause discrepancies\n            // or actions that require more info than is available to one player\n            //console.log(inputData.input);\n                if (inputData.input == 'b') {\n                    this.emit('beginPerformance', player);\n                }\n                else if (inputData.input == '[') {\n                    let newNumber = player.number - 1;\n                    if (newNumber < 0) newNumber = players.length - 1;\n                    for (let p of players) { \n                        if (p.number === newNumber) {\n                            p.number = player.number; \n                            p.move((p.number - newNumber) * this.playerWidth, 0);\n                        }\n                    }\n                    player.move((newNumber - player.number) * this.playerWidth, 0);\n                    player.number = newNumber;\n                }\n                else if (inputData.input == ']') {\n                    let newNumber = player.number + 1;\n                    if (newNumber >= players.length) newNumber = 0;\n                    for (let p of players) { \n                        if (p.number === newNumber) {\n                            p.number = player.number; \n                            p.move((p.number - newNumber) * this.playerWidth, 0);\n                        }\n                    }\n                    player.move((newNumber - player.number) * this.playerWidth, 0);\n                    player.number = newNumber;\n                } \n            }\n        }\n        else if (player.stage === 'intro') {\n\n        }\n        else if (player.stage === 'build') {\n            if (inputData.input == 'space') {\n                for (let e of eggs) {\n                    if (this.positionIsInPlayer(e.position.x, player)) {\n                        //player.direction = 1;\n                        this.playerHitEgg(player, e, isServer);\n                    }\n                }\n            }\n            /*\n            else if (inputData.input == 'w') {\n                for (let e of eggsByType.perc) {\n                    if (this.positionIsInPlayer(e.position.x, player)) {\n                        this.playerHitEgg(player, e, isServer);\n                    }\n                }\n            }\n            else if (inputData.input == 'e') {\n                for (let e of eggsByType.bass) {\n                    if (this.positionIsInPlayer(e.position.x, player)) {\n                        this.playerHitEgg(player, e, isServer);\n                    }\n                }\n            } */\n        }\n        else if (player.stage === 'fight') {\n            if (isServer) {\n                if (inputData.input == 'w') {\n                    player.move(0, -1);\n                    player.paint();\n                }\n                else if (inputData.input == 'a') {\n                    player.move(-1, 0);\n                    player.paint();\n                }\n                else if (inputData.input == 's') {\n                    player.move(0, 1);\n                    player.paint();\n                }\n                else if (inputData.input == 'd') {\n                    player.move(1, 0);\n                    player.paint();\n                }\n                if (inputData.input == 'b') {\n                    this.emit('beginPerformance', player);\n                }\n            }\n        }\n    }\n}\n"],"file":"InterferenceGameEngine.js"}