{"version":3,"sources":["../../src/common/InterferenceGameEngine.js"],"names":["scales","InterferenceGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","autoResolve","on","moveAll","bind","Object","assign","playerWidth","playerHeight","transportSyncInterval","serializer","registerClass","Performer","Egg","x","Math","random","spaceWidth","y","spaceHeight","TwoVector","stepInfo","isReenact","world","forEachObject","id","obj","inputData","playerId","isServer","player","queryObject","input","console","log","number","notestack","concat","String","fromCharCode","length","floor","GameEngine"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,MAAM,GAAG,CAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAF,EAAwB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAAxB,EAA8C,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAA9C,CAAf;;IAEqBC,sB;;;;;AAEjB,kCAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB,gGAAMA,OAAN;AACA,UAAKC,aAAL,GAAqB,IAAIC,4BAAJ,CAAwB;AACzCC,MAAAA,UAAU,+BAD+B;AAEzCC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,WAAW,EAAE;AAAf;AAF6B,KAAxB,CAArB;;AAIA,UAAKC,EAAL,CAAQ,SAAR,EAAmB,MAAKC,OAAL,CAAaC,IAAb,+BAAnB,EANiB,CAQjB;;;AACAC,IAAAA,MAAM,CAACC,MAAP,gCAAoB;AAChBC,MAAAA,WAAW,EAAE,EADG;AACCC,MAAAA,YAAY,EAAE,CADf;AACkBC,MAAAA,qBAAqB,EAAE;AADzC,KAApB;AAIA;;;;;;;;;AAbiB;AAqBpB;;;;oCAEeC,U,EAAY;AACxBA,MAAAA,UAAU,CAACC,aAAX,CAAyBC,kBAAzB;AACAF,MAAAA,UAAU,CAACC,aAAX,CAAyBE,YAAzB;AACH;;;4BAEO;AACJ;AACH;;;8BAES;AACN,UAAIC,CAAC,GAAG,CAACC,IAAI,CAACC,MAAL,KAAgB,GAAjB,IAAwB,KAAKC,UAArC;AACA,UAAIC,CAAC,GAAG,CAACH,IAAI,CAACC,MAAL,KAAgB,GAAjB,IAAwB,KAAKG,WAArC;AACA,aAAO,IAAIC,kBAAJ,CAAcN,CAAd,EAAiBI,CAAjB,CAAP;AACH;;;4BAEOG,Q,EAAU;AAEd,UAAIA,QAAQ,CAACC,SAAb,EACI;AAEJ,WAAKC,KAAL,CAAWC,aAAX,CAAyB,UAACC,EAAD,EAAKC,GAAL,EAAa;AAClC,YAAIA,GAAG,YAAYd,kBAAnB,EAA8B;AAC1B;;;;;;;;;;;;;;;;;AAkBH;AACJ,OArBD;AAsBH;;;iCAEYe,S,EAAWC,Q,EAAUC,Q,EAAU;AAExC,+FAAmBF,SAAnB,EAA8BC,QAA9B;;AAEA,UAAIE,MAAM,GAAG,KAAKP,KAAL,CAAWQ,WAAX,CAAuB;AAAEH,QAAAA,QAAQ,EAARA;AAAF,OAAvB,CAAb;;AACA,UAAIC,QAAJ,EAAc;AACV,YAAIC,MAAJ,EAAY;AACR,cAAIH,SAAS,CAACK,KAAV,IAAmB,GAAvB,EAA4B;AACxBC,YAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,MAAnB;AACAL,YAAAA,MAAM,CAACM,SAAP,GAAmBN,MAAM,CAACM,SAAP,CAAiBC,MAAjB,CACfC,MAAM,CAACC,YAAP,CAAoB7C,MAAM,CAACoC,MAAM,CAACK,MAAP,GAAczC,MAAM,CAAC8C,MAAtB,CAAN,CAAoCzB,IAAI,CAAC0B,KAAL,CAAW1B,IAAI,CAACC,MAAL,KAAgBtB,MAAM,CAAC,CAAD,CAAN,CAAU8C,MAArC,CAApC,CAApB,CADe,CAAnB;AAGAP,YAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACM,SAAnB;AACH;AACJ;AACJ,OAVD,MAWK;AACD,YAAIN,MAAJ,EAAY;AACR,cAAIH,SAAS,CAACK,KAAV,IAAmB,OAAvB,EAAgC,CAE/B;AACJ;AACJ;AACJ;;;;EA5F+CU,mB","sourcesContent":["import { GameEngine, SimplePhysicsEngine, TwoVector } from 'lance-gg';\nimport Performer from './Performer';\nimport Egg from './Egg';\n\nconst scales = [ [60, 62, 64, 67, 69], [62, 64, 65, 69, 70], [57, 59, 60, 64, 65] ];\n\nexport default class InterferenceGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n        this.physicsEngine = new SimplePhysicsEngine({\n            gameEngine: this,\n            collisions: { autoResolve: false }\n        });\n        this.on('preStep', this.moveAll.bind(this));\n\n        // game variables\n        Object.assign(this, {\n            playerWidth: 16, playerHeight: 9, transportSyncInterval: 200\n        });\n\n        /*\n        Object.assign(this, {\n            foodRadius: 0.1, headRadius: 0.15, bodyRadius: 0.1,\n            eyeDist: 0.08, eyeRadius: 0.03, eyeAngle: 0.5,\n            spaceWidth: 16, spaceHeight: 9, moveDist: 0.06,\n            foodCount: 16, eatDistance: 0.3, collideDistance: 0.3,\n            startBodyLength: 10, aiCount: 3, directionStop: 100\n        }); */\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Performer);\n        serializer.registerClass(Egg);\n    }\n\n    start() {\n        super.start();\n    }\n\n    randPos() {\n        let x = (Math.random() - 0.5) * this.spaceWidth;\n        let y = (Math.random() - 0.5) * this.spaceHeight;\n        return new TwoVector(x, y);\n    }\n\n    moveAll(stepInfo) {\n\n        if (stepInfo.isReenact)\n            return;\n\n        this.world.forEachObject((id, obj) => {\n            if (obj instanceof Performer) {\n                /*\n                // if the position changed, add a body part and trim the length\n                let pos = obj.position.clone();\n                if (obj.bodyParts.length === 0 || pos.subtract(obj.bodyParts[obj.bodyParts.length-1]).length() > 0.05) {\n                    obj.bodyParts.push(obj.position.clone());\n                    while (obj.bodyLength < obj.bodyParts.length) obj.bodyParts.shift();\n                }\n\n                // if not stopped, move along\n                if (obj.direction === this.directionStop) return;\n                let move = new TwoVector(Math.cos(obj.direction), Math.sin(obj.direction));\n                move.multiplyScalar(0.05);\n                obj.position.add(move);\n                obj.position.y = Math.min(obj.position.y, this.spaceHeight / 2);\n                obj.position.y = Math.max(obj.position.y, -this.spaceHeight / 2);\n                obj.position.x = Math.min(obj.position.x, this.spaceWidth / 2);\n                obj.position.x = Math.max(obj.position.x, -this.spaceWidth / 2);\n                */\n            }\n        });\n    }\n\n    processInput(inputData, playerId, isServer) {\n\n        super.processInput(inputData, playerId);\n        \n        let player = this.world.queryObject({ playerId });\n        if (isServer) {\n            if (player) {\n                if (inputData.input == 'n') {\n                    console.log(player.number);\n                    player.notestack = player.notestack.concat(\n                        String.fromCharCode(scales[player.number%scales.length][Math.floor(Math.random() * scales[0].length)])\n                    );\n                    console.log(player.notestack);\n                }\n            }\n        }\n        else {\n            if (player) {\n                if (inputData.input == 'space') {\n\n                }\n            }\n        }\n    }\n}\n"],"file":"InterferenceGameEngine.js"}