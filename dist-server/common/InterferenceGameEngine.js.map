{"version":3,"sources":["../../src/common/InterferenceGameEngine.js"],"names":["palettes","InterferenceGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","autoResolve","Object","assign","cellWidth","cellHeight","playerWidth","playerHeight","leftBound","topBound","bottomBound","transportSyncInterval","eggRadius","eggBaseXVelocity","playerCellWidth","playerCellHeight","cellsPerPlayer","rooms","playersByRoom","eggsByRoom","rightBoundByRoom","on","preStepLogic","bind","postStepLogic","serializer","registerClass","Performer","Egg","roomName","x","Math","random","length","y","TwoVector","stepInfo","groupBy","world","queryObjects","instanceType","keys","r","resolveCollisions","gameLogic","e","position","velocity","emit","hp","broken","p","isServer","ammo","console","log","number","rightBound","cellX","floor","cellY","cell","cellAtPosition","playerCellX","playerCellY","arr","property","reduce","grouped","current","push","inputData","playerId","player","queryObject","players","_roomName","eggs","stage","input","palette","indexOf","newNumber","positionIsInPlayer","playerHitEgg","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, SimplePhysicsEngine, TwoVector } from 'lance-gg';\nimport Performer from './Performer';\nimport Egg from './Egg';\n\nconst palettes = ['rain', 'celeste', 'pyre', 'journey', 'kirby'];\n\nexport default class InterferenceGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n        this.physicsEngine = new SimplePhysicsEngine({\n            gameEngine: this,\n            collisions: { autoResolve: false }\n        });\n\n        // game constants\n        Object.assign(this, {\n            cellWidth: 1, cellHeight: 1, playerWidth: 16, playerHeight: 9, \n            leftBound: 0, topBound: 0, bottomBound: 9,\n            transportSyncInterval: 200, eggRadius: 1, eggBaseXVelocity: 0.1\n        });\n\n        // dependent game constants\n        Object.assign(this, {\n            playerCellWidth: this.playerWidth / this.cellWidth, \n            playerCellHeight: this.playerHeight / this.cellHeight, \n            cellsPerPlayer: (this.playerWidth / this.cellWidth) * (this.playerHeight / this.cellHeight) \n        });\n\n        // game variables\n        Object.assign(this, {\n            rooms: [], playersByRoom: {}, eggsByRoom: {}, rightBoundByRoom: {}\n        });\n\n        this.on('preStep', this.preStepLogic.bind(this));\n        this.on('postStep', this.postStepLogic.bind(this));\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Performer);\n        serializer.registerClass(Egg);\n    }\n\n    start() {\n        super.start();\n    }\n\n    randPos(roomName) {\n        let x = Math.random() * this.playerWidth * this.playersByRoom[roomName].length;\n        let y = Math.random() * this.playerHeight;\n        return new TwoVector(x, y);\n    }\n\n    velRandY() {\n        let y = (Math.random() - 0.5) * this.eggBaseXVelocity;\n        return new TwoVector(this.eggBaseXVelocity, y);\n    }\n\n    preStepLogic(stepInfo) {\n        this.playersByRoom = this.groupBy(this.world.queryObjects({ instanceType: Performer }), \"_roomName\");\n        this.rooms = Object.keys(this.playersByRoom);\n        this.eggsByRoom = this.groupBy(this.world.queryObjects({ instanceType: Egg }), \"_roomName\");\n        this.rightBoundByRoom = {};\n        for (let r of this.rooms) {\n            this.rightBoundByRoom[r] = this.playersByRoom[r].length * this.playerWidth;\n        }\n    }\n\n    postStepLogic(stepInfo) {\n        for (let r of this.rooms) {\n            this.resolveCollisions(r);\n            this.gameLogic(r);\n        }\n    }\n\n    resolveCollisions(r) {\n        /*\n        if (stepInfo.isReenact)\n            return;\n        */\n\n        if (this.eggsByRoom[r]) {\n            for (let e of this.eggsByRoom[r]) {\n                // bounce off walls\n                if ((e.position.x - this.eggRadius) < this.leftBound) {\n                    e.velocity.x *= -1;\n                    e.position.x = this.leftBound + this.eggRadius;\n                    this.emit('eggBounce', e);\n                } \n                else if ((e.position.x + this.eggRadius) > this.rightBoundByRoom[r]) {\n                    e.velocity.x *= -1;\n                    e.position.x = this.rightBoundByRoom[r] - this.eggRadius;\n                    this.emit('eggBounce', e);\n                }\n                if ((e.position.y - this.eggRadius) < this.topBound) {\n                    e.velocity.y *= -1\n                    e.position.y = this.topBound + this.eggRadius;\n                    this.emit('eggBounce', e);\n                }\n                else if ((e.position.y + this.eggRadius) > this.bottomBound) {\n                    e.velocity.y *= -1\n                    e.position.y = this.bottomBound - this.eggRadius;\n                    this.emit('eggBounce', e);\n                }\n                // check if broken\n                if (e.hp <= 0 && !e.broken) {\n                    e.broken = true;\n                    this.emit('eggBroke', e);\n                }\n            }\n        }\n        \n                        /*\n        this.world.forEachObject((id, obj) => {\n            if (obj instanceof Egg) {\n\n                // if the position changed, add a body part and trim the length\n                let pos = obj.position.clone();\n                if (obj.bodyParts.length === 0 || pos.subtract(obj.bodyParts[obj.bodyParts.length-1]).length() > 0.05) {\n                    obj.bodyParts.push(obj.position.clone());\n                    while (obj.bodyLength < obj.bodyParts.length) obj.bodyParts.shift();\n                }\n\n                // if not stopped, move along\n                if (obj.direction === this.directionStop) return;\n                let move = new TwoVector(Math.cos(obj.direction), Math.sin(obj.direction));\n                move.multiplyScalar(0.05);\n                obj.position.add(move);\n                obj.position.y = Math.min(obj.position.y, this.spaceHeight / 2);\n                obj.position.y = Math.max(obj.position.y, -this.spaceHeight / 2);\n                obj.position.x = Math.min(obj.position.x, this.spaceWidth / 2);\n                obj.position.x = Math.max(obj.position.x, -this.spaceWidth / 2);\n\n            }\n        });                */\n    }\n\n    gameLogic(r) {\n        if (this.eggsByRoom[r]) {\n            for (let e of this.eggsByRoom[r]) {\n                if (e.hp <= 0) {\n                    e.velocity.x = 0;\n                    e.velocity.y = 0;\n                }\n            }\n        }\n    }\n\n    playerHitEgg(p, e, isServer) {\n        if (e.hp <= 0) return;\n        if (p.ammo <= 0) return;\n        p.ammo--;\n        this.emit('playerHitEgg', e);\n        if (isServer) {\n            e.hp--;\n            console.log(e.hp)\n        }\n    }\n\n    positionIsInPlayer(x, p) {\n        let leftBound = p.number * this.playerWidth;\n        let rightBound = (p.number + 1) * this.playerWidth;\n        return (leftBound < x && x < rightBound);\n    }\n\n    cellAtPosition(x, y) {\n        let cellX = Math.floor(x / this.cellWidth);\n        let cellY = Math.floor(y / this.cellHeight);\n        return [cellX, cellY];\n    }\n\n    playerCellAtPosition(p, x, y) {\n        let cell = this.cellAtPosition(x, y)\n        let playerCellX = cell[0] - (p.number * this.playerCellWidth);\n        let playerCellY = cell[1];\n        return [playerCellX, playerCellY];\n    }\n\n    groupBy(arr, property) {\n        return arr.reduce((grouped, current) => {\n            if (!grouped[current[property]]) grouped[current[property]] = [];\n            grouped[current[property]].push(current);\n            return grouped;\n        }, {});\n    }\n\n    processInput(inputData, playerId, isServer) {\n\n        super.processInput(inputData, playerId);\n        \n        let player = this.world.queryObject({ playerId });\n        let players = this.playersByRoom[player._roomName];\n        let eggs = this.eggsByRoom[player._roomName];\n\n        if (player.stage === 'setup') {\n            if (inputData.input == 'c') {\n                player.palette = palettes[(palettes.indexOf(player.palette)+1)%palettes.length];\n                console.log(player.palette);\n            }\n            if (isServer) { \n            // stuff that should only be processed on the server, such as randomness, which would otherwise cause discrepancies\n            // or actions that require more info than is available to one player\n            //console.log(inputData.input);\n                if (inputData.input == '[') {\n                    let newNumber = player.number - 1;\n                    if (newNumber < 0) newNumber = players.length - 1;\n                    for (let p of players) { \n                        if (p.number === newNumber) p.number = player.number; \n                    }\n                    player.number = newNumber;\n                }\n                else if (inputData.input == ']') {\n                    let newNumber = player.number + 1;\n                    if (newNumber >= players.length) newNumber = 0;\n                    for (let p of players) { \n                        if (p.number === newNumber) p.number = player.number; \n                    }\n                    player.number = newNumber;\n                } \n                else if (inputData.input == 'b') {\n                    this.emit('beginPerformance', player);\n                }\n            }\n        }\n        else if (player.stage === 'intro') {\n            if (inputData.input == 'space') {\n                for (let e of eggs) {\n                    if (this.positionIsInPlayer(e.position.x, player)) {\n                        this.playerHitEgg(player, e, isServer);\n                    }\n                }\n            }\n        }\n        /*\n        else if (inputData.input == 'n') {\n            let scale = scaleTable[player.palette];\n            player.notestack = player.notestack.concat(\n                String.fromCharCode(scale[Math.floor(Math.random() * scale.length)])\n            );\n            console.log(player.notestack);\n        } */\n    }\n}\n"],"file":"InterferenceGameEngine.js"}