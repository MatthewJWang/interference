{"version":3,"sources":["../../src/common/InterferenceGameEngine.js"],"names":["scaleTable","palettes","InterferenceGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","autoResolve","Object","assign","cellSize","playerWidth","playerHeight","leftBound","topBound","bottomBound","transportSyncInterval","eggRadius","eggBaseXVelocity","rooms","playersByRoom","eggsByRoom","rightBoundByRoom","on","preStepLogic","bind","postStepLogic","serializer","registerClass","Performer","Egg","roomName","x","Math","random","length","y","TwoVector","stepInfo","groupBy","world","queryObjects","instanceType","keys","r","resolveCollisions","gameLogic","e","console","log","position","velocity","arr","property","reduce","grouped","current","push","inputData","playerId","isServer","player","queryObject","input","palette","indexOf","scale","notestack","concat","String","fromCharCode","floor","emit","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, SimplePhysicsEngine, TwoVector } from 'lance-gg';\nimport Performer from './Performer';\nimport Egg from './Egg';\n\nconst scaleTable = {\n    'rain':     [60, 64, 66, 69, 71],\n    'celeste':  [60, 62, 63, 65, 67],\n    'pyre':     [60, 62, 63, 67, 70],\n    'journey':  [60, 62, 64, 67, 69],\n    'kirby':    [60, 62, 64, 65, 67],\n    'default':  [60, 62, 64, 65, 67]\n}\nconst palettes = ['rain', 'celeste', 'pyre', 'journey', 'kirby'];\n\nexport default class InterferenceGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n        this.physicsEngine = new SimplePhysicsEngine({\n            gameEngine: this,\n            collisions: { autoResolve: false }\n        });\n\n        // game constants\n        Object.assign(this, {\n            cellSize: 1, playerWidth: 16, playerHeight: 9,\n            leftBound: 0, topBound: 0, bottomBound: 9,\n            transportSyncInterval: 200, eggRadius: 1, eggBaseXVelocity: 0.1\n        });\n\n        // game variables\n        Object.assign(this, {\n            rooms: [], playersByRoom: {}, eggsByRoom: {}, rightBoundByRoom: {}\n        });\n\n        this.on('preStep', this.preStepLogic.bind(this));\n        this.on('postStep', this.postStepLogic.bind(this));\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Performer);\n        serializer.registerClass(Egg);\n    }\n\n    start() {\n        super.start();\n    }\n\n    randPos(roomName) {\n        let x = Math.random() * this.playerWidth * this.playersByRoom[roomName].length;\n        let y = Math.random() * this.playerHeight;\n        return new TwoVector(x, y);\n    }\n\n    velRandY() {\n        let y = (Math.random() - 0.5) * this.eggBaseXVelocity;\n        return new TwoVector(this.eggBaseXVelocity, y);\n    }\n\n    preStepLogic(stepInfo) {\n        this.playersByRoom = this.groupBy(this.world.queryObjects({ instanceType: Performer }), \"_roomName\");\n        this.rooms = Object.keys(this.playersByRoom);\n        this.eggsByRoom = this.groupBy(this.world.queryObjects({ instanceType: Egg }), \"_roomName\");\n        this.rightBoundByRoom = {};\n        for (let r of this.rooms) {\n            this.rightBoundByRoom[r] = this.playersByRoom[r].length * this.playerWidth;\n        }\n    }\n\n    postStepLogic(stepInfo) {\n        for (let r of this.rooms) {\n            this.resolveCollisions(r);\n            this.gameLogic(r);\n        }\n    }\n\n    resolveCollisions(r) {\n        /*\n        if (stepInfo.isReenact)\n            return;\n        */\n\n        if (this.eggsByRoom[r]) {\n            for (let e of this.eggsByRoom[r]) {\n                console.log(e.position);\n                // bounce off walls\n                if ((e.position.x - this.eggRadius) < this.leftBound) {\n                    e.velocity.x *= -1;\n                    e.position.x = this.leftBound + this.eggRadius;\n                } \n                else if ((e.position.x + this.eggRadius) > this.rightBoundByRoom[r]) {\n                    e.velocity.x *= -1;\n                    e.position.x = this.rightBoundByRoom[r] - this.eggRadius;\n                }\n                if ((e.position.y - this.eggRadius) < this.topBound) {\n                    e.velocity.y *= -1\n                    e.position.y = this.topBound + this.eggRadius;\n                }\n                else if ((e.position.y + this.eggRadius) > this.bottomBound) {\n                    e.velocity.y *= -1\n                    e.position.y = this.bottomBound - this.eggRadius;\n                }\n            }\n        }\n        \n                        /*\n        this.world.forEachObject((id, obj) => {\n            if (obj instanceof Egg) {\n\n                // if the position changed, add a body part and trim the length\n                let pos = obj.position.clone();\n                if (obj.bodyParts.length === 0 || pos.subtract(obj.bodyParts[obj.bodyParts.length-1]).length() > 0.05) {\n                    obj.bodyParts.push(obj.position.clone());\n                    while (obj.bodyLength < obj.bodyParts.length) obj.bodyParts.shift();\n                }\n\n                // if not stopped, move along\n                if (obj.direction === this.directionStop) return;\n                let move = new TwoVector(Math.cos(obj.direction), Math.sin(obj.direction));\n                move.multiplyScalar(0.05);\n                obj.position.add(move);\n                obj.position.y = Math.min(obj.position.y, this.spaceHeight / 2);\n                obj.position.y = Math.max(obj.position.y, -this.spaceHeight / 2);\n                obj.position.x = Math.min(obj.position.x, this.spaceWidth / 2);\n                obj.position.x = Math.max(obj.position.x, -this.spaceWidth / 2);\n\n            }\n        });                */\n    }\n\n    gameLogic(r) {\n\n    }\n\n    groupBy(arr, property) {\n        return arr.reduce((grouped, current) => {\n            if (!grouped[current[property]]) grouped[current[property]] = [];\n            grouped[current[property]].push(current);\n            return grouped;\n        }, {});\n    }\n\n    processInput(inputData, playerId, isServer) {\n\n        super.processInput(inputData, playerId);\n        \n        let player = this.world.queryObject({ playerId });\n        if (player) {\n            if (inputData.input == 'c') {\n                player.palette = palettes[(palettes.indexOf(player.palette)+1)%palettes.length];\n                console.log(player.palette);\n            }\n        }\n        if (isServer) { \n        // stuff that should only be processed on the server, such as randomness, which would otherwise cause discrepancies\n            if (inputData.input == 'n') {\n                let scale = scaleTable[player.palette];\n                player.notestack = player.notestack.concat(\n                    String.fromCharCode(scale[Math.floor(Math.random() * scale.length)])\n                );\n                console.log(player.notestack);\n            }\n            if (inputData.input == 'b') {\n                this.emit('beginPerformance', player);\n            }\n        }\n    }\n}\n"],"file":"InterferenceGameEngine.js"}