{"version":3,"sources":["../../src/common/InterferenceGameEngine.js"],"names":["InterferenceGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","autoResolve","Object","assign","cellWidth","cellHeight","playerWidth","playerHeight","leftBound","topBound","bottomBound","transportSyncInterval","eggRadius","eggBaseXVelocity","palettes","paletteAttributes","scale","gridWidth","gridHeight","playerCellWidth","playerCellHeight","cellsPerPlayer","rooms","playersByRoom","eggsByRoom","rightBoundByRoom","on","preStepLogic","bind","postStepLogic","serializer","registerClass","Performer","Egg","roomName","x","Math","random","length","y","TwoVector","stepInfo","groupBy","world","queryObjects","instanceType","keys","r","quantizedMovement","resolveCollisions","gameLogic","e","position","velocity","emit","hp","broken","p","isServer","ammo","pal","palette","pos","playerQuantizedPosition","step","pitch","dur","seq","sequences","sound","note","push","Note","vel","cell","JSON","stringify","console","log","number","rightBound","divX","divY","cellX","floor","cellY","quantizedPosition","playerCellX","playerCellY","arr","property","reduce","grouped","current","inputData","playerId","player","queryObject","players","_roomName","eggs","eggsByType","stage","input","indexOf","newNumber","melody","positionIsInPlayer","playerHitEgg","perc","bass","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, SimplePhysicsEngine, TwoVector } from 'lance-gg';\nimport Note from './Note';\nimport Performer from './Performer';\nimport Egg from './Egg';\n\n//const palettes = ['rain', 'celeste', 'pyre', 'journey', 'kirby'];\n\nexport default class InterferenceGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n        this.physicsEngine = new SimplePhysicsEngine({\n            gameEngine: this,\n            collisions: { autoResolve: false }\n        });\n\n        // game constants\n        Object.assign(this, {\n            cellWidth: 1, cellHeight: 1, playerWidth: 16, playerHeight: 9, \n            leftBound: 0, topBound: 0, bottomBound: 9,\n            transportSyncInterval: 200, eggRadius: 1, eggBaseXVelocity: 0.15,\n            palettes: [1, 2, 3, 4, 5],\n            paletteAttributes: [\n                { //default\n                    scale: [0, 2, 4, 5, 7], \n                    gridWidth: 0,\n                    gridHeight: 0\n\n                },\n                { //rain\n                    scale: [0, 4, 6, 9, 11], \n                    gridWidth: 16,\n                    gridHeight: 9\n                },\n                { //celeste\n                    scale: [0, 2, 3, 5, 7], \n                    gridWidth: 16,\n                    gridHeight: 9\n                },\n                { //pyre\n                    scale: [0, 2, 3, 7, 10], \n                    gridWidth: 16,\n                    gridHeight: 9\n                },\n                { //journey\n                    scale: [0, 2, 4, 7, 9], \n                    gridWidth: 16,\n                    gridHeight: 9\n                },\n                { //kirby\n                    scale: [0, 2, 4, 5, 7], \n                    gridWidth: 16,\n                    gridHeight: 9\n                }\n            ]\n        });\n\n        // dependent game constants\n        Object.assign(this, {\n            playerCellWidth: this.playerWidth / this.cellWidth, \n            playerCellHeight: this.playerHeight / this.cellHeight, \n            cellsPerPlayer: (this.playerWidth / this.cellWidth) * (this.playerHeight / this.cellHeight) \n        });\n\n        // game variables\n        Object.assign(this, {\n            rooms: [], playersByRoom: {}, eggsByRoom: {}, rightBoundByRoom: {}\n        });\n\n        this.on('preStep', this.preStepLogic.bind(this));\n        this.on('postStep', this.postStepLogic.bind(this));\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Performer);\n        serializer.registerClass(Egg);\n    }\n\n    start() {\n        super.start();\n    }\n\n    randPos(roomName) {\n        let x = Math.random() * this.playerWidth * this.playersByRoom[roomName].length;\n        let y = Math.random() * this.playerHeight;\n        return new TwoVector(x, y);\n    }\n\n    velRandY() {\n        let y = (Math.random() - 0.5) * this.eggBaseXVelocity;\n        return new TwoVector(this.eggBaseXVelocity, y);\n    }\n\n    preStepLogic(stepInfo) {\n        this.playersByRoom = this.groupBy(this.world.queryObjects({ instanceType: Performer }), \"_roomName\");\n        this.rooms = Object.keys(this.playersByRoom);\n        this.eggsByRoom = this.groupBy(this.world.queryObjects({ instanceType: Egg }), \"_roomName\");\n        this.rightBoundByRoom = {};\n        for (let r of this.rooms) {\n            this.rightBoundByRoom[r] = this.playersByRoom[r].length * this.playerWidth;\n        }\n    }\n\n    postStepLogic(stepInfo) {\n        for (let r of this.rooms) {\n            this.quantizedMovement(r);\n            this.resolveCollisions(r);\n            this.gameLogic(r);\n        }\n    }\n\n    quantizedMovement(r) {\n        if (this.eggsByRoom[r]) {\n            for (let e of this.eggsByRoom[r]) {\n\n            }\n        }\n\n    }\n\n    resolveCollisions(r) {\n        /*\n        if (stepInfo.isReenact)\n            return;\n        */\n\n        if (this.eggsByRoom[r]) {\n            for (let e of this.eggsByRoom[r]) {\n                // bounce off walls\n                if ((e.position.x - this.eggRadius) < this.leftBound) {\n                    e.velocity.x *= -1;\n                    e.position.x = this.leftBound + this.eggRadius;\n                    this.emit('eggBounce', e);\n                } \n                else if ((e.position.x + this.eggRadius) > this.rightBoundByRoom[r]) {\n                    e.velocity.x *= -1;\n                    e.position.x = this.rightBoundByRoom[r] - this.eggRadius;\n                    this.emit('eggBounce', e);\n                }\n                if ((e.position.y - this.eggRadius) < this.topBound) {\n                    e.velocity.y *= -1\n                    e.position.y = this.topBound + this.eggRadius;\n                    this.emit('eggBounce', e);\n                }\n                else if ((e.position.y + this.eggRadius) > this.bottomBound) {\n                    e.velocity.y *= -1\n                    e.position.y = this.bottomBound - this.eggRadius;\n                    this.emit('eggBounce', e);\n                }\n                // check if broken\n                if (e.hp <= 0 && !e.broken) {\n                    e.broken = true;\n                    this.emit('eggBroke', e);\n                }\n            }\n        }\n        \n                        /*\n        this.world.forEachObject((id, obj) => {\n            if (obj instanceof Egg) {\n\n                // if the position changed, add a body part and trim the length\n                let pos = obj.position.clone();\n                if (obj.bodyParts.length === 0 || pos.subtract(obj.bodyParts[obj.bodyParts.length-1]).length() > 0.05) {\n                    obj.bodyParts.push(obj.position.clone());\n                    while (obj.bodyLength < obj.bodyParts.length) obj.bodyParts.shift();\n                }\n\n                // if not stopped, move along\n                if (obj.direction === this.directionStop) return;\n                let move = new TwoVector(Math.cos(obj.direction), Math.sin(obj.direction));\n                move.multiplyScalar(0.05);\n                obj.position.add(move);\n                obj.position.y = Math.min(obj.position.y, this.spaceHeight / 2);\n                obj.position.y = Math.max(obj.position.y, -this.spaceHeight / 2);\n                obj.position.x = Math.min(obj.position.x, this.spaceWidth / 2);\n                obj.position.x = Math.max(obj.position.x, -this.spaceWidth / 2);\n\n            }\n        });                */\n    }\n\n    gameLogic(r) {\n        if (this.eggsByRoom[r]) {\n            for (let e of this.eggsByRoom[r]) {\n                if (e.hp <= 0) {\n                    e.velocity.x = 0;\n                    e.velocity.y = 0;\n                }\n            }\n        }\n    }\n\n    playerHitEgg(p, e, isServer) {\n\n        if (e.hp <= 0) return;\n        if (p.ammo <= 0) return;\n\n        let pal = p.palette;\n        let pos = this.playerQuantizedPosition(p, e.position.x, e.position.y, \n            this.paletteAttributes[pal].gridWidth, this.paletteAttributes[pal].gridHeight);\n        let scale = this.paletteAttributes[pal].scale; //TODO should base this on grid\n        let step = pos[0];\n        let pitch = (this.paletteAttributes[pal].gridHeight - pos[1]) + (scale.length * 4);\n        let dur = '16n';\n\n        let seq = p.sequences[e.sound];\n        if (seq[step]) {\n            for (let note of seq[step]) {\n                if (note.pitch === pitch) note = '2n';\n                else seq[step].push(new Note({ \n                    pitch: pitch,\n                    dur: dur,\n                    vel: 1,\n                    cell: { x: pos[0], y: pos[1] },\n                    step: step\n                }));    \n            }\n        }\n        else seq[step] = [new Note({ \n            pitch: pitch,\n            dur: dur,\n            vel: 1,\n            cell: { x: pos[0], y: pos[1] },\n            step: step\n        })];\n        p[e.sound] = JSON.stringify(seq);\n\n        p.ammo--;\n        this.emit('playerHitEgg', e);\n        if (isServer) {\n            e.hp--;\n            console.log(e.hp)\n        }\n    }\n\n    positionIsInPlayer(x, p) {\n        let leftBound = p.number * this.playerWidth;\n        let rightBound = (p.number + 1) * this.playerWidth;\n        return (leftBound < x && x < rightBound);\n    }\n\n    quantizedPosition(x, y, divX, divY) {\n        let cellX = Math.floor(x / (this.playerWidth / divX)) * (this.playerWidth / divX);\n        let cellY = Math.floor(y / (this.playerHeight / divY)) * (this.playerHeight / divY);\n        return [cellX, cellY];\n    }\n\n    playerQuantizedPosition(p, x, y, divX, divY) {\n        let cell = this.quantizedPosition(x, y, divX, divY);\n        let playerCellX = cell[0] - (p.number * divX);\n        let playerCellY = cell[1];\n        return [playerCellX, playerCellY];\n    }\n\n    groupBy(arr, property) {\n        return arr.reduce((grouped, current) => {\n            if (!grouped[current[property]]) grouped[current[property]] = [];\n            grouped[current[property]].push(current);\n            return grouped;\n        }, {});\n    }\n\n    processInput(inputData, playerId, isServer) {\n\n        super.processInput(inputData, playerId);\n        \n        let player = this.world.queryObject({ playerId });\n        let players = this.playersByRoom[player._roomName];\n        let eggs = this.eggsByRoom[player._roomName];\n        let eggsByType = {};\n        if (eggs) {\n            eggsByType = this.groupBy(eggs, 'sound');\n        }\n\n        if (player.stage === 'setup') {\n            if (inputData.input == 'c') {\n                player.palette = this.palettes[(this.palettes.indexOf(player.palette)+1)%this.palettes.length];\n                console.log(player.palette);\n            }\n            if (isServer) { \n            // stuff that should only be processed on the server, such as randomness, which would otherwise cause discrepancies\n            // or actions that require more info than is available to one player\n            //console.log(inputData.input);\n                if (inputData.input == '[') {\n                    let newNumber = player.number - 1;\n                    if (newNumber < 0) newNumber = players.length - 1;\n                    for (let p of players) { \n                        if (p.number === newNumber) p.number = player.number; \n                    }\n                    player.number = newNumber;\n                }\n                else if (inputData.input == ']') {\n                    let newNumber = player.number + 1;\n                    if (newNumber >= players.length) newNumber = 0;\n                    for (let p of players) { \n                        if (p.number === newNumber) p.number = player.number; \n                    }\n                    player.number = newNumber;\n                } \n                else if (inputData.input == 'b') {\n                    this.emit('beginPerformance', player);\n                }\n            }\n        }\n        else if (player.stage === 'intro') {\n            if (isServer) {\n                if (inputData.input == 'q') {\n                    for (let e of eggsByType.melody) {\n                        if (this.positionIsInPlayer(e.position.x, player)) {\n                            this.playerHitEgg(player, e, isServer);\n                        }\n                    }\n                }\n                if (inputData.input == 'w') {\n                    for (let e of eggsByType.perc) {\n                        if (this.positionIsInPlayer(e.position.x, player)) {\n                            this.playerHitEgg(player, e, isServer);\n                        }\n                    }\n                }\n                if (inputData.input == 'e') {\n                    for (let e of eggsByType.bass) {\n                        if (this.positionIsInPlayer(e.position.x, player)) {\n                            this.playerHitEgg(player, e, isServer);\n                        }\n                    }\n                }\n            }\n        }\n        /*\n        else if (inputData.input == 'n') {\n            let scale = paletteAttributes.scale[player.palette];\n            player.notestack = player.notestack.concat(\n                String.fromCharCode(scale[Math.floor(Math.random() * scale.length)])\n            );\n            console.log(player.notestack);\n        } */\n    }\n}\n"],"file":"InterferenceGameEngine.js"}