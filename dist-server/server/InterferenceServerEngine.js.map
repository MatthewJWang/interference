{"version":3,"sources":["../../src/server/InterferenceServerEngine.js"],"names":["hpRange","hpMin","initAmmo","ammoInc","InterferenceServerEngine","io","gameEngine","inputOptions","myRooms","roomStages","syncServers","on","stepLogic","bind","player","onBeginPerformance","socket","Performer","number","palette","ammo","stage","gridString","getEmptyGridStringByPalette","melody","JSON","stringify","bass","perc","console","log","playerId","addObjectToWorld","roomName","Object","keys","includes","createRoom","createSyncServer","length","palettes","eggsByRoom","e","hp","Math","floor","random","push","assignPlayerToRoom","assignObjectToRoom","assignPlayerToSyncServer","emit","startTime","process","hrtime","SyncServer","now","start","pingId","clientPingTime","serverPingTime","serverPongTime","response","callback","data","request","socketId","world","queryObject","removed","removeObjectFromWorld","id","k","splice","indexOf","p","queryObjects","instanceType","Egg","r","_roomName","addEgg","sound","newEgg","position","randPos","velocity","velRandY","numPlayers","reload","Array","paletteAttributes","gridWidth","fill","gridHeight","ServerEngine"],"mappings":"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","sourcesContent":["import { ServerEngine } from 'lance-gg';\nimport SyncServer from '@ircam/sync/server';\nimport Note from '../common/Note';\nimport Performer from '../common/Performer';\nimport Egg from '../common/Egg';\n\n//const palettes = ['rain', 'celeste', 'pyre', 'journey', 'kirby'];\n\nconst hpRange = 5;\nconst hpMin = 5;\nconst initAmmo = 4;\nconst ammoInc = 4;\n\nexport default class InterferenceServerEngine extends ServerEngine {\n\n    constructor(io, gameEngine, inputOptions) {\n        super(io, gameEngine, inputOptions);\n\n        this.myRooms = {}; //roomName: [players in the room]\n        this.roomStages = {};\n        this.syncServers = {}; //roomName: syncServer\n\n        this.gameEngine.on('postStep', this.stepLogic.bind(this));\n        this.gameEngine.on('beginPerformance', player => { this.onBeginPerformance(player) });\n    }\n\n    // create food and AI robots\n    start() {\n        super.start();\n        /*\n        for (let f = 0; f < this.gameEngine.foodCount; f++) {\n            let newF = new Egg(this.gameEngine, null, { position: this.gameEngine.randPos() });\n            this.gameEngine.addObjectToWorld(newF);\n        }\n        */\n    }\n\n    onPlayerConnected(socket) {\n        super.onPlayerConnected(socket);\n\n        let player = new Performer(this.gameEngine, null, {});\n        player.number = -1;\n        player.palette = 0; //default\n        player.ammo = 0;\n        player.stage = 'setup';\n        player.gridString = this.getEmptyGridStringByPalette(0);\n        player.melody = JSON.stringify([]);\n        player.bass = JSON.stringify([]);\n        player.perc = JSON.stringify([]);\n\n        console.log(player.number);\n        player.playerId = socket.playerId;\n        this.gameEngine.addObjectToWorld(player);\n\n        socket.on('assignToRoom', roomName => {\n            if (!Object.keys(this.myRooms).includes(roomName)) {\n                this.createRoom(roomName);\n                this.createSyncServer(roomName);\n                this.myRooms[roomName] = [];\n                this.roomStages[roomName] = 'setup';\n            }\n            player.number = this.myRooms[roomName].length;\n            player.palette = this.gameEngine.palettes[player.number%this.gameEngine.palettes.length];\n            player.stage = this.roomStages[roomName];\n            player.gridString = this.getEmptyGridStringByPalette(player.palette);\n            player.melody = JSON.stringify([]);\n            player.bass = JSON.stringify([]);\n            player.perc = JSON.stringify([]);\n\n            if (player.stage === 'intro') {\n                player.ammo = initAmmo;\n                for (let e of this.gameEngine.eggsByRoom[roomName]) {\n                    e.hp += Math.floor((Math.random() * hpRange) + hpMin);\n                }\n            }\n\n            console.log(player.number);\n            this.myRooms[roomName].push(player);\n            this.assignPlayerToRoom(player.playerId, roomName);\n            this.assignObjectToRoom(player, roomName);\n            this.assignPlayerToSyncServer(socket, roomName);\n            socket.emit('assignedRoom', roomName);\n        });\n    }\n\n    createSyncServer(roomName) {\n        const startTime = process.hrtime();\n        this.syncServers[roomName] = new SyncServer(() => {\n            let now = process.hrtime(startTime);\n            return now[0] + now[1] * 1e-9;\n        });\n    }\n\n    assignPlayerToSyncServer(socket, roomName) {\n        this.syncServers[roomName].start(\n        // sync send function\n        (pingId, clientPingTime, serverPingTime, serverPongTime) => {\n            //console.log(`[pong] - id: %s, clientPingTime: %s, serverPingTime: %s, serverPongTime: %s`,\n            //  pingId, clientPingTime, serverPingTime, serverPongTime);\n            const response = [];\n            response[0] = 1; // this is a pong\n            response[1] = pingId;\n            response[2] = clientPingTime;\n            response[3] = serverPingTime;\n            response[4] = serverPongTime;\n            socket.emit('syncServerData', response);\n        }, \n        //sync receive function\n        callback => {\n            socket.on('syncClientData', data => {\n                const request = data;\n\n                if (request[0] === 0) { // this is a ping\n                    const pingId = request[1];\n                    const clientPingTime = request[2];\n\n                    //console.log(`[ping] - pingId: %s, clientPingTime: %s`, clientPingTime);\n\n                    callback(pingId, clientPingTime);\n                }\n            });\n        });\n    }\n\n    onPlayerDisconnected(socketId, playerId) {\n        super.onPlayerDisconnected(socketId, playerId);\n        let player = this.gameEngine.world.queryObject({ playerId });\n        if (player) { \n            let removed = player.number;\n            this.gameEngine.removeObjectFromWorld(player.id);\n            for (let k of Object.keys(this.myRooms)) {\n                if (this.myRooms[k].includes(player)) {\n                    this.myRooms[k].splice(this.myRooms[k].indexOf(player), 1);\n                    for (let p of this.myRooms[k]) {\n                        if (p.number > removed) p.number--; \n                    }\n                }\n                if (this.myRooms[k].length === 0) {\n                    for (let e of this.gameEngine.world.queryObjects({ instanceType: Egg })) \n                        this.gameEngine.removeObjectFromWorld(e);\n                    delete this.myRooms[k];\n                    delete this.syncServers[k];\n                }\n            }\n        }\n    }\n\n    onBeginPerformance(player) {\n        console.log('beginning');\n        let r = player._roomName;\n        this.roomStages[r] = 'intro';\n        for (let p of this.myRooms[r])\n            p.stage = 'intro';\n        this.addEgg('melody', r);\n        this.addEgg('bass', r);\n        this.addEgg('perc', r);\n    }\n\n    addEgg(sound, roomName) {\n        let newEgg = new Egg(this.gameEngine, null, {   position: this.gameEngine.randPos(roomName), \n                                                        velocity: this.gameEngine.velRandY() });\n        let numPlayers = this.myRooms[roomName].length;\n        for (let p of this.myRooms[roomName]) p.ammo += initAmmo;\n        newEgg.number = 0;\n        newEgg.sound = sound;\n        newEgg.hp = Math.floor((Math.random() * numPlayers * hpRange) + (numPlayers * hpMin));\n        this.assignObjectToRoom(newEgg, roomName)\n        this.gameEngine.addObjectToWorld(newEgg);\n    }\n\n    /*\n    // Eating Egg:\n    // increase body length, and remove the food\n    wiggleEatFood(w, f) {\n        if (!(f.id in this.gameEngine.world.objects))\n            return;\n\n        w.bodyLength++;\n        this.gameEngine.removeObjectFromWorld(f);\n        let newF = new Egg(this.gameEngine, null, { position: this.gameEngine.randPos() });\n        this.gameEngine.addObjectToWorld(newF);\n    }\n\n    wiggleHitWiggle(w1, w2) {\n        if (!(w2.id in this.gameEngine.world.objects) || !(w1.id in this.gameEngine.world.objects))\n            return;\n\n        this.gameEngine.removeObjectFromWorld(w1);\n        if (w1.AI) this.addAI();\n    }\n    */\n    stepLogic() {\n\n        for (let k of Object.keys(this.myRooms)) {\n            let reload = true;\n            for (let p of this.myRooms[k]) {\n                if (p.ammo > 0) reload = false;\n            }\n            if (reload) {\n                for (let p of this.myRooms[k]) {\n                    p.ammo += ammoInc;\n                }\n            }\n        }\n    }\n\n    getEmptyGridStringByPalette(p) {\n        let gridString = new Array(this.gameEngine.paletteAttributes[p].gridWidth).fill(\n            new Array(this.gameEngine.paletteAttributes[p].gridHeight).fill(p));\n        return JSON.stringify(gridString);\n    }\n}\n"],"file":"InterferenceServerEngine.js"}