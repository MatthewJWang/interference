{"version":3,"sources":["../../src/server/InterferenceServerEngine.js"],"names":["transportSyncCount","rooms","palettes","InterferenceServerEngine","io","gameEngine","inputOptions","startTime","process","hrtime","syncServer","SyncServer","now","on","stepLogic","bind","socket","start","pingId","clientPingTime","serverPingTime","serverPongTime","response","emit","callback","data","request","player","Performer","number","palette","notestack","rhythmstack","console","log","playerId","addObjectToWorld","roomName","Object","keys","includes","createRoom","length","push","assignPlayerToRoom","assignObjectToRoom","socketId","world","queryObject","removed","removeObjectFromWorld","id","k","splice","indexOf","p","players","queryObjects","instanceType","eggs","Egg","ServerEngine"],"mappings":"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","sourcesContent":["import { ServerEngine } from 'lance-gg';\nimport SyncServer from '@ircam/sync/server';\nimport Performer from '../common/Performer';\nimport Egg from '../common/Egg';\n\nlet transportSyncCount = 0;\nlet rooms = {};\nconst palettes = ['rain'];\n\nexport default class InterferenceServerEngine extends ServerEngine {\n\n    constructor(io, gameEngine, inputOptions) {\n        super(io, gameEngine, inputOptions);\n\n        // MJW: sync init\n        this.startTime = process.hrtime();\n\n        this.syncServer = new SyncServer(() => {\n            let now = process.hrtime(this.startTime);\n            return now[0] + now[1] * 1e-9;\n        });\n\n        this.gameEngine.on('postStep', this.stepLogic.bind(this));\n    }\n\n    // create food and AI robots\n    start() {\n        super.start();\n        /*\n        for (let f = 0; f < this.gameEngine.foodCount; f++) {\n            let newF = new Egg(this.gameEngine, null, { position: this.gameEngine.randPos() });\n            this.gameEngine.addObjectToWorld(newF);\n        }\n        */\n    }\n\n    onPlayerConnected(socket) {\n        super.onPlayerConnected(socket);\n\n        this.syncServer.start(\n        // sync send function\n        (pingId, clientPingTime, serverPingTime, serverPongTime) => {\n            //console.log(`[pong] - id: %s, clientPingTime: %s, serverPingTime: %s, serverPongTime: %s`,\n            //  pingId, clientPingTime, serverPingTime, serverPongTime);\n            const response = [];\n            response[0] = 1; // this is a pong\n            response[1] = pingId;\n            response[2] = clientPingTime;\n            response[3] = serverPingTime;\n            response[4] = serverPongTime;\n            socket.emit('syncServerData', response);\n        }, \n        //sync receive function\n        callback => {\n            socket.on('syncClientData', data => {\n                const request = data;\n\n                if (request[0] === 0) { // this is a ping\n                    const pingId = request[1];\n                    const clientPingTime = request[2];\n\n                    //console.log(`[ping] - pingId: %s, clientPingTime: %s`, clientPingTime);\n\n                    callback(pingId, clientPingTime);\n                }\n            });\n        });\n        //let numPlayers = this.gameEngine.world.queryObjects({ instanceType: Performer }).length;\n        let player = new Performer(this.gameEngine, null, {});\n        player.number = -1;\n        player.palette = 'default';\n        player.notestack = '';\n        player.rhythmstack = '';\n        console.log(player.number);\n        player.playerId = socket.playerId;\n        this.gameEngine.addObjectToWorld(player);\n\n        socket.on('assignToRoom', roomName => {\n            if (!Object.keys(rooms).includes(roomName)) {\n                this.createRoom(roomName);\n                rooms[roomName] = [];\n            }\n            player.number = rooms[roomName].length;\n            player.palette = palettes[player.number%palettes.length];\n            console.log(player.number);\n            rooms[roomName].push(player);\n            this.assignPlayerToRoom(player.playerId, roomName);\n            this.assignObjectToRoom(player, roomName);\n            socket.emit('assignedRoom', roomName);\n        });\n    }\n\n    onPlayerDisconnected(socketId, playerId) {\n        super.onPlayerDisconnected(socketId, playerId);\n        let player = this.gameEngine.world.queryObject({ playerId });\n        if (player) { \n            let removed = player.number;\n            this.gameEngine.removeObjectFromWorld(player.id);\n            for (let k of Object.keys(rooms)) {\n                if (rooms[k].includes(player)) {\n                    rooms[k].splice(rooms[k].indexOf(player), 1);\n                    for (let p of rooms[k]) if (p.number > removed) p.number--; \n                }\n            }\n        }\n    }\n\n    /*\n    // Eating Egg:\n    // increase body length, and remove the food\n    wiggleEatFood(w, f) {\n        if (!(f.id in this.gameEngine.world.objects))\n            return;\n\n        w.bodyLength++;\n        this.gameEngine.removeObjectFromWorld(f);\n        let newF = new Egg(this.gameEngine, null, { position: this.gameEngine.randPos() });\n        this.gameEngine.addObjectToWorld(newF);\n    }\n\n    wiggleHitWiggle(w1, w2) {\n        if (!(w2.id in this.gameEngine.world.objects) || !(w1.id in this.gameEngine.world.objects))\n            return;\n\n        this.gameEngine.removeObjectFromWorld(w1);\n        if (w1.AI) this.addAI();\n    }\n    */\n    stepLogic() {\n\n        let players = this.gameEngine.world.queryObjects({ instanceType: Performer });\n        let eggs = this.gameEngine.world.queryObjects({ instanceType: Egg });\n        for (let p of players) {\n            /*\n            // check for collision\n            for (let w2 of wiggles) {\n                if (w === w2)\n                    continue;\n\n                for (let i = 0; i < w2.bodyParts.length; i++) {\n                    let distance = w2.bodyParts[i].clone().subtract(w.position);\n                    if (distance.length() < this.gameEngine.collideDistance)\n                        this.wiggleHitWiggle(w, w2);\n                }\n            }\n\n            // check for food-eating\n            for (let f of foodObjects) {\n                let distance = w.position.clone().subtract(f.position);\n                if (distance.length() < this.gameEngine.eatDistance) {\n                    this.wiggleEatFood(w, f);\n                }\n            }\n\n            // move AI wiggles\n            if (w.AI) {\n                if (Math.random() < 0.01) w.turnDirection *= -1;\n                w.direction += w.turnDirection * (Math.random() - 0.9)/20;\n                if (w.position.y >= this.gameEngine.spaceHeight / 2) w.direction = -Math.PI/2;\n                if (w.position.y <= -this.gameEngine.spaceHeight / 2) w.direction = Math.PI/2;\n                if (w.position.x >= this.gameEngine.spaceWidth / 2) w.direction = Math.PI;\n                if (w.position.x <= -this.gameEngine.spaceWidth / 2) w.direction = 0;\n                if (w.direction > Math.PI * 2) w.direction -= Math.PI * 2;\n                if (w.direction < 0) w.direction += Math.PI * 2;\n            }\n            */\n        }\n\n    \n    }\n}\n"],"file":"InterferenceServerEngine.js"}