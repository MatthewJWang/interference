{"version":3,"sources":["../../src/server/InterferenceServerEngine.js"],"names":["InterferenceServerEngine","io","gameEngine","inputOptions","myRooms","roomStages","syncServers","on","stepLogic","bind","player","onBeginPerformance","socket","Performer","number","palette","ammo","stage","gridString","getEmptyGridStringByPalette","melody","JSON","stringify","bass","perc","console","log","playerId","addObjectToWorld","roomName","Object","keys","includes","createRoom","createSyncServer","length","palettes","eggsByRoom","e","broken","startingAmmo","hp","Math","floor","random","eggHPRange","eggHPMin","push","assignPlayerToRoom","assignObjectToRoom","assignPlayerToSyncServer","emit","pal","eggId","x","y","sound","inputId","p","world","queryObject","id","pos","playerQuantizedPosition","paletteAttributes","gridWidth","gridHeight","scale","pitch","dur","subdivision","notes","queryNotes","ownerId","xCell","yCell","newNote","Note","vel","_roomName","startTime","process","hrtime","SyncServer","now","start","pingId","clientPingTime","serverPingTime","serverPongTime","response","callback","data","request","socketId","removed","removeObjectFromWorld","n","k","splice","indexOf","forEachObject","objId","obj","r","setGameStage","addEgg","newEgg","Egg","position","randPos","velocity","velRandY","numPlayers","room","reload","reloadSize","Array","fill","ServerEngine"],"mappings":"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","sourcesContent":["import { ServerEngine } from 'lance-gg';\nimport SyncServer from '@ircam/sync/server';\nimport Note from '../common/Note';\nimport Performer from '../common/Performer';\nimport Egg from '../common/Egg';\n\n//const palettes = ['rain', 'celeste', 'pyre', 'journey', 'kirby'];\n\nexport default class InterferenceServerEngine extends ServerEngine {\n\n    constructor(io, gameEngine, inputOptions) {\n        super(io, gameEngine, inputOptions);\n\n        this.myRooms = {}; //roomName: [players in the room]\n        this.roomStages = {};\n        this.syncServers = {}; //roomName: syncServer\n\n        this.gameEngine.on('postStep', this.stepLogic.bind(this));\n        this.gameEngine.on('beginPerformance', player => { this.onBeginPerformance(player) });\n    }\n\n    // create food and AI robots\n    start() {\n        super.start();\n        /*\n        for (let f = 0; f < this.gameEngine.foodCount; f++) {\n            let newF = new Egg(this.gameEngine, null, { position: this.gameEngine.randPos() });\n            this.gameEngine.addObjectToWorld(newF);\n        }\n        */\n    }\n\n    onPlayerConnected(socket) {\n        super.onPlayerConnected(socket);\n\n        let player = new Performer(this.gameEngine, null, {});\n        player.number = -1;\n        player.palette = 0; //default\n        player.ammo = 0;\n        player.stage = 'setup';\n        player.gridString = this.getEmptyGridStringByPalette(0);\n        player.melody = JSON.stringify([]);\n        player.bass = JSON.stringify([]);\n        player.perc = JSON.stringify([]);\n\n        console.log(player.number);\n        player.playerId = socket.playerId;\n        this.gameEngine.addObjectToWorld(player);\n\n        socket.on('assignToRoom', roomName => {\n            if (!Object.keys(this.myRooms).includes(roomName)) {\n                this.createRoom(roomName);\n                this.createSyncServer(roomName);\n                this.myRooms[roomName] = [];\n                this.roomStages[roomName] = 'setup';\n            }\n            player.number = this.myRooms[roomName].length;\n            player.palette = this.gameEngine.palettes[player.number%this.gameEngine.palettes.length];\n            player.stage = this.roomStages[roomName];\n            player.gridString = this.getEmptyGridStringByPalette(player.palette);\n\n            if (player.stage === 'intro') {\n                for (let e of this.gameEngine.eggsByRoom[roomName]) {\n                    if (!e.broken) {\n                        player.ammo += this.gameEngine.startingAmmo;\n                        e.hp += Math.floor((Math.random() * this.gameEngine.eggHPRange) + this.gameEngine.eggHPMin);\n                    }\n                }\n            }\n\n            console.log(player.number);\n            this.myRooms[roomName].push(player);\n            this.assignPlayerToRoom(player.playerId, roomName);\n            this.assignObjectToRoom(player, roomName);\n            this.assignPlayerToSyncServer(socket, roomName);\n            socket.emit('assignedRoom', roomName);\n        });\n\n        socket.on('updatePalette', pal => {\n            player.palette = pal;\n        });\n\n        socket.on('playerHitEgg', (ammo, eggId, hp, x, y, sound, inputId) => {\n            let p = player;\n            p.ammo = ammo;\n            let e = this.gameEngine.world.queryObject({ id: eggId });\n            e.hp = hp;\n            let pal = p.palette;\n            let pos = this.gameEngine.playerQuantizedPosition(p, x, y, \n                this.gameEngine.paletteAttributes[pal].gridWidth, this.gameEngine.paletteAttributes[pal].gridHeight);\n            let scale = this.gameEngine.paletteAttributes[pal].scale; //TODO should base this on palette of the cell?\n            let pitch = (this.gameEngine.paletteAttributes[pal].gridHeight - pos[1]) + (scale.length * 4);\n            let dur = this.gameEngine.paletteAttributes[pal][sound].subdivision;\n\n            let notes = this.gameEngine.queryNotes({            \n                ownerId: p.playerId, \n                palette: pal,\n                sound: sound, \n                pitch: pitch, \n                //vel: 1, \n                xCell: pos[0], \n                yCell: pos[1] \n            });\n            if (notes.length) notes[0].dur = '2n';\n            else {\n                let newNote = new Note(this.gameEngine, null, { \n                    ownerId: p.playerId, \n                    palette: pal,\n                    sound: sound, \n                    pitch: pitch, \n                    dur: dur,\n                    vel: 1, \n                    xCell: pos[0], \n                    yCell: pos[1] \n                });\n                newNote.inputId = inputId;\n                this.assignObjectToRoom(newNote, p._roomName);\n                this.gameEngine.addObjectToWorld(newNote);\n            }\n        });\n    }\n\n    createSyncServer(roomName) {\n        const startTime = process.hrtime();\n        this.syncServers[roomName] = new SyncServer(() => {\n            let now = process.hrtime(startTime);\n            return now[0] + now[1] * 1e-9;\n        });\n    }\n\n    assignPlayerToSyncServer(socket, roomName) {\n        this.syncServers[roomName].start(\n        // sync send function\n        (pingId, clientPingTime, serverPingTime, serverPongTime) => {\n            //console.log(`[pong] - id: %s, clientPingTime: %s, serverPingTime: %s, serverPongTime: %s`,\n            //  pingId, clientPingTime, serverPingTime, serverPongTime);\n            const response = [];\n            response[0] = 1; // this is a pong\n            response[1] = pingId;\n            response[2] = clientPingTime;\n            response[3] = serverPingTime;\n            response[4] = serverPongTime;\n            socket.emit('syncServerData', response);\n        }, \n        //sync receive function\n        callback => {\n            socket.on('syncClientData', data => {\n                const request = data;\n\n                if (request[0] === 0) { // this is a ping\n                    const pingId = request[1];\n                    const clientPingTime = request[2];\n\n                    //console.log(`[ping] - pingId: %s, clientPingTime: %s`, clientPingTime);\n\n                    callback(pingId, clientPingTime);\n                }\n            });\n        });\n    }\n\n    onPlayerDisconnected(socketId, playerId) {\n        super.onPlayerDisconnected(socketId, playerId);\n        let player = this.gameEngine.world.queryObject({ playerId });\n        if (player) { \n            let removed = player.number;\n            this.gameEngine.removeObjectFromWorld(player.id);\n            for (let n of this.gameEngine.queryNotes({ ownerId: playerId })) {\n                this.gameEngine.removeObjectFromWorld(n);\n            }\n            for (let k of Object.keys(this.myRooms)) {\n                if (player._roomName === k) {\n                    this.myRooms[k].splice(this.myRooms[k].indexOf(player), 1);\n                    for (let p of this.myRooms[k]) {\n                        if (p.number > removed) p.number--; \n                    }\n                }\n                if (this.myRooms[k].length === 0) {\n                    this.gameEngine.world.forEachObject((objId, obj) => { \n                        if (obj._roomName === k) this.gameEngine.removeObjectFromWorld(objId);\n                    });\n                    delete this.myRooms[k];\n                    delete this.syncServers[k];\n                }\n            }\n        }\n    }\n\n    onBeginPerformance(player) {\n        console.log('beginning');\n        let r = player._roomName;\n        this.setGameStage(r, 'intro');\n        this.addEgg('melody', r);\n        this.addEgg('bass', r);\n        this.addEgg('perc', r);\n    }\n\n    addEgg(sound, roomName) {\n        let newEgg = new Egg(this.gameEngine, null, {   position: this.gameEngine.randPos(roomName), \n                                                        velocity: this.gameEngine.velRandY() });\n        let numPlayers = this.myRooms[roomName].length;\n        for (let p of this.myRooms[roomName]) p.ammo += this.gameEngine.startingAmmo;\n        //newEgg.number = 0;\n        newEgg.sound = sound;\n        newEgg.hp = Math.floor((Math.random() * numPlayers * this.gameEngine.eggHPRange) + (numPlayers * this.gameEngine.eggHPMin));\n        this.assignObjectToRoom(newEgg, roomName);\n        this.gameEngine.addObjectToWorld(newEgg);\n    }\n\n    setGameStage(room, stage) {\n        this.roomStages[room] = stage;\n        for (let p of this.myRooms[room])\n            p.stage = stage;\n    }\n\n    /*\n    // Eating Egg:\n    // increase body length, and remove the food\n    wiggleEatFood(w, f) {\n        if (!(f.id in this.gameEngine.world.objects))\n            return;\n\n        w.bodyLength++;\n        this.gameEngine.removeObjectFromWorld(f);\n        let newF = new Egg(this.gameEngine, null, { position: this.gameEngine.randPos() });\n        this.gameEngine.addObjectToWorld(newF);\n    }\n\n    wiggleHitWiggle(w1, w2) {\n        if (!(w2.id in this.gameEngine.world.objects) || !(w1.id in this.gameEngine.world.objects))\n            return;\n\n        this.gameEngine.removeObjectFromWorld(w1);\n        if (w1.AI) this.addAI();\n    }\n    */\n    stepLogic() {\n\n        for (let k of Object.keys(this.myRooms)) {\n            if (this.roomStages[k] === 'intro') {\n                let reload = true;\n                for (let p of this.myRooms[k]) {\n                    if (p.ammo > 0) reload = false;\n                }\n                if (reload) {\n                    for (let p of this.myRooms[k]) {\n                        p.ammo += (this.gameEngine.reloadSize * this.gameEngine.eggsByRoom[k].length);\n                    }\n                }\n            }\n        }\n    }\n\n    getEmptyGridStringByPalette(p) {\n        let gridString = new Array(this.gameEngine.paletteAttributes[p].gridWidth).fill(\n            new Array(this.gameEngine.paletteAttributes[p].gridHeight).fill(p));\n        return JSON.stringify(gridString);\n    }\n}\n"],"file":"InterferenceServerEngine.js"}