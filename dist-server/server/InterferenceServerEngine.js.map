{"version":3,"sources":["../../src/server/InterferenceServerEngine.js"],"names":["palettes","InterferenceServerEngine","io","gameEngine","inputOptions","myRooms","roomStages","syncServers","on","stepLogic","bind","player","onBeginPerformance","socket","Performer","number","palette","notestack","rhythmstack","ammo","stage","console","log","playerId","addObjectToWorld","roomName","Object","keys","includes","createRoom","createSyncServer","length","eggsByRoom","e","hp","Math","floor","random","push","assignPlayerToRoom","assignObjectToRoom","assignPlayerToSyncServer","emit","startTime","process","hrtime","SyncServer","now","start","pingId","clientPingTime","serverPingTime","serverPongTime","response","callback","data","request","socketId","world","queryObject","removed","removeObjectFromWorld","id","k","splice","indexOf","p","queryObjects","instanceType","Egg","r","_roomName","addEgg","newEgg","position","randPos","velocity","velRandY","numPlayers","sound","reload","ServerEngine"],"mappings":"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","sourcesContent":["import { ServerEngine } from 'lance-gg';\nimport SyncServer from '@ircam/sync/server';\nimport Performer from '../common/Performer';\nimport Egg from '../common/Egg';\n\nconst palettes = ['rain', 'celeste', 'pyre', 'journey', 'kirby'];\n\nexport default class InterferenceServerEngine extends ServerEngine {\n\n    constructor(io, gameEngine, inputOptions) {\n        super(io, gameEngine, inputOptions);\n\n        this.myRooms = {}; //roomName: [players in the room]\n        this.roomStages = {};\n        this.syncServers = {}; //roomName: syncServer\n\n        this.gameEngine.on('postStep', this.stepLogic.bind(this));\n        this.gameEngine.on('beginPerformance', player => { this.onBeginPerformance(player) });\n    }\n\n    // create food and AI robots\n    start() {\n        super.start();\n        /*\n        for (let f = 0; f < this.gameEngine.foodCount; f++) {\n            let newF = new Egg(this.gameEngine, null, { position: this.gameEngine.randPos() });\n            this.gameEngine.addObjectToWorld(newF);\n        }\n        */\n    }\n\n    onPlayerConnected(socket) {\n        super.onPlayerConnected(socket);\n\n        let player = new Performer(this.gameEngine, null, {});\n        player.number = -1;\n        player.palette = 'default';\n        player.notestack = '';\n        player.rhythmstack = '';\n        player.ammo = 0;\n        player.stage = 'setup'\n        console.log(player.number);\n        player.playerId = socket.playerId;\n        this.gameEngine.addObjectToWorld(player);\n\n        socket.on('assignToRoom', roomName => {\n            if (!Object.keys(this.myRooms).includes(roomName)) {\n                this.createRoom(roomName);\n                this.createSyncServer(roomName);\n                this.myRooms[roomName] = [];\n                this.roomStages[roomName] = 'setup';\n            }\n            player.number = this.myRooms[roomName].length;\n            player.palette = palettes[player.number%palettes.length];\n            player.stage = this.roomStages[roomName];\n            if (player.stage === 'intro') {\n                player.ammo += 8;\n                for (let e of this.gameEngine.eggsByRoom[roomName]) {\n                    e.hp += Math.floor((Math.random() * 3) + 5);\n                }\n            }\n            console.log(player.number);\n            this.myRooms[roomName].push(player);\n            this.assignPlayerToRoom(player.playerId, roomName);\n            this.assignObjectToRoom(player, roomName);\n            this.assignPlayerToSyncServer(socket, roomName);\n            socket.emit('assignedRoom', roomName);\n        });\n    }\n\n    createSyncServer(roomName) {\n        const startTime = process.hrtime();\n        this.syncServers[roomName] = new SyncServer(() => {\n            let now = process.hrtime(startTime);\n            return now[0] + now[1] * 1e-9;\n        });\n    }\n\n    assignPlayerToSyncServer(socket, roomName) {\n        this.syncServers[roomName].start(\n        // sync send function\n        (pingId, clientPingTime, serverPingTime, serverPongTime) => {\n            //console.log(`[pong] - id: %s, clientPingTime: %s, serverPingTime: %s, serverPongTime: %s`,\n            //  pingId, clientPingTime, serverPingTime, serverPongTime);\n            const response = [];\n            response[0] = 1; // this is a pong\n            response[1] = pingId;\n            response[2] = clientPingTime;\n            response[3] = serverPingTime;\n            response[4] = serverPongTime;\n            socket.emit('syncServerData', response);\n        }, \n        //sync receive function\n        callback => {\n            socket.on('syncClientData', data => {\n                const request = data;\n\n                if (request[0] === 0) { // this is a ping\n                    const pingId = request[1];\n                    const clientPingTime = request[2];\n\n                    //console.log(`[ping] - pingId: %s, clientPingTime: %s`, clientPingTime);\n\n                    callback(pingId, clientPingTime);\n                }\n            });\n        });\n    }\n\n    onPlayerDisconnected(socketId, playerId) {\n        super.onPlayerDisconnected(socketId, playerId);\n        let player = this.gameEngine.world.queryObject({ playerId });\n        if (player) { \n            let removed = player.number;\n            this.gameEngine.removeObjectFromWorld(player.id);\n            for (let k of Object.keys(this.myRooms)) {\n                if (this.myRooms[k].includes(player)) {\n                    this.myRooms[k].splice(this.myRooms[k].indexOf(player), 1);\n                    for (let p of this.myRooms[k]) {\n                        if (p.number > removed) p.number--; \n                    }\n                }\n                if (this.myRooms[k].length === 0) {\n                    for (let e of this.gameEngine.world.queryObjects({ instanceType: Egg })) \n                        this.gameEngine.removeObjectFromWorld(e);\n                    delete this.myRooms[k];\n                    delete this.syncServers[k];\n                }\n            }\n        }\n    }\n\n    onBeginPerformance(player) {\n        console.log('beginning');\n        let r = player._roomName;\n        this.roomStages[r] = 'intro';\n        for (let p of this.myRooms[r])\n            p.stage = 'intro';\n        this.addEgg(r);\n    }\n\n    addEgg(roomName) {\n        let newEgg = new Egg(this.gameEngine, null, {   position: this.gameEngine.randPos(roomName), \n                                                        velocity: this.gameEngine.velRandY() });\n        let numPlayers = this.myRooms[roomName].length;\n        for (let p of this.myRooms[roomName]) p.ammo += 8;\n        newEgg.number = 0;\n        newEgg.sound = 'melody';\n        newEgg.hp = Math.floor((Math.random() * numPlayers * 3) + (numPlayers * 5));\n        this.assignObjectToRoom(newEgg, roomName)\n        this.gameEngine.addObjectToWorld(newEgg);\n    }\n\n    /*\n    // Eating Egg:\n    // increase body length, and remove the food\n    wiggleEatFood(w, f) {\n        if (!(f.id in this.gameEngine.world.objects))\n            return;\n\n        w.bodyLength++;\n        this.gameEngine.removeObjectFromWorld(f);\n        let newF = new Egg(this.gameEngine, null, { position: this.gameEngine.randPos() });\n        this.gameEngine.addObjectToWorld(newF);\n    }\n\n    wiggleHitWiggle(w1, w2) {\n        if (!(w2.id in this.gameEngine.world.objects) || !(w1.id in this.gameEngine.world.objects))\n            return;\n\n        this.gameEngine.removeObjectFromWorld(w1);\n        if (w1.AI) this.addAI();\n    }\n    */\n    stepLogic() {\n\n        for (let k of Object.keys(this.myRooms)) {\n            let reload = true;\n            for (let p of this.myRooms[k]) {\n                if (p.ammo > 0) reload = false;\n            }\n            if (reload) {\n                for (let p of this.myRooms[k]) {\n                    p.ammo += 4;\n                }\n            }\n        }\n    }\n}\n"],"file":"InterferenceServerEngine.js"}