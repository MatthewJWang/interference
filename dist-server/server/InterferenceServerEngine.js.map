{"version":3,"sources":["../../src/server/InterferenceServerEngine.js"],"names":["InterferenceServerEngine","io","gameEngine","inputOptions","myRooms","roomStages","syncServers","moveTimes","on","preStepLogic","bind","postStepLogic","player","onBeginPerformance","e","onEggBroke","socket","Performer","number","palette","ammo","direction","stage","gridString","getEmptyGridStringByPalette","cell","TwoVector","playerId","addObjectToWorld","roomName","Object","keys","includes","createRoom","createSyncServer","length","xPos","playerWidth","yPos","palettes","grid","JSON","parse","eggsByRoom","broken","startingAmmo","hp","Math","floor","random","eggHPRange","eggHPMin","console","log","push","assignPlayerToRoom","assignObjectToRoom","assignPlayerToSyncServer","emit","pal","eggId","x","y","sound","inputId","p","world","queryObject","id","paletteAttributes","pos","quantizedPosition","gridWidth","gridHeight","scale","pitch","dur","subdivision","notes","queryNotes","ownerId","newNote","Note","vel","_roomName","startTime","process","hrtime","SyncServer","now","start","pingId","clientPingTime","serverPingTime","serverPongTime","response","callback","data","request","socketId","removed","removeObjectFromWorld","n","room","splice","indexOf","forEachObject","objId","obj","startBuildStage","r","setGameStage","moveTo","rand","eggSoundsToUse","eggSounds","addEgg","newEgg","Egg","position","randPos","velocity","velRandY","numPlayers","playersByRoom","reload","reloadSize","Array","fill","stringify","ServerEngine"],"mappings":"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","sourcesContent":["import { ServerEngine, TwoVector } from 'lance-gg';\nimport SyncServer from '@ircam/sync/server';\nimport Note from '../common/Note';\nimport Performer from '../common/Performer';\nimport Egg from '../common/Egg';\nimport { Transport } from 'tone';\n\n//const palettes = ['rain', 'celeste', 'pyre', 'journey', 'kirby'];\n\nexport default class InterferenceServerEngine extends ServerEngine {\n\n    constructor(io, gameEngine, inputOptions) {\n        super(io, gameEngine, inputOptions);\n\n        this.myRooms = {}; //roomName: [players in the room]\n        this.roomStages = {};\n        this.syncServers = {}; //roomName: syncServer\n        this.moveTimes = {};\n\n        this.gameEngine.on('server__preStep', this.preStepLogic.bind(this));\n        this.gameEngine.on('server__postStep', this.postStepLogic.bind(this));\n        this.gameEngine.on('beginPerformance', player => { this.onBeginPerformance(player) });\n        this.gameEngine.on('eggBroke', e => { this.onEggBroke(e) });\n    }\n\n    // create food and AI robots\n    start() {\n        super.start();\n        /*\n        for (let f = 0; f < this.gameEngine.foodCount; f++) {\n            let newF = new Egg(this.gameEngine, null, { position: this.gameEngine.randPos() });\n            this.gameEngine.addObjectToWorld(newF);\n        }\n        */\n    }\n\n    onPlayerConnected(socket) {\n        super.onPlayerConnected(socket);\n\n        let player = new Performer(this.gameEngine, null, {});\n        player.number = -1;\n        player.palette = 0; //default\n        player.ammo = 0;\n        player.direction = 0;\n        player.stage = 'setup';\n        player.gridString = this.getEmptyGridStringByPalette(0);\n        player.cell = new TwoVector(0, 0);\n\n        player.playerId = socket.playerId;\n        this.gameEngine.addObjectToWorld(player);\n\n        socket.on('assignToRoom', roomName => {\n            if (!Object.keys(this.myRooms).includes(roomName)) {\n                this.createRoom(roomName);\n                this.createSyncServer(roomName);\n                this.myRooms[roomName] = [];\n                this.roomStages[roomName] = 'setup';\n            }\n            player.number = this.myRooms[roomName].length;\n            player.xPos = player.number * this.gameEngine.playerWidth;\n            player.yPos = 0;\n            player.palette = this.gameEngine.palettes[player.number%this.gameEngine.palettes.length];\n            player.stage = this.roomStages[roomName];\n            player.gridString = this.getEmptyGridStringByPalette(player.palette);\n            player.grid = JSON.parse(player.gridString);\n\n            if (player.stage === 'build') {\n                for (let e of this.gameEngine.eggsByRoom[roomName]) {\n                    if (!e.broken) {\n                        player.ammo += this.gameEngine.startingAmmo;\n                        e.hp += Math.floor((Math.random() * this.gameEngine.eggHPRange) + this.gameEngine.eggHPMin);\n                    }\n                }\n            }\n\n            console.log(player.number);\n            this.myRooms[roomName].push(player);\n            this.assignPlayerToRoom(player.playerId, roomName);\n            this.assignObjectToRoom(player, roomName);\n            this.assignPlayerToSyncServer(socket, roomName);\n            socket.emit('assignedRoom', roomName);\n        });\n\n        socket.on('updatePalette', pal => {\n            player.palette = pal;\n            player.gridString = this.getEmptyGridStringByPalette(player.palette);\n        });\n\n        socket.on('playerHitEgg', (ammo, eggId, hp, x, y, sound, inputId) => {\n            let p = player;\n            p.ammo = ammo;\n            let e = this.gameEngine.world.queryObject({ id: eggId });\n            e.hp = hp;\n            let pal = this.gameEngine.paletteAttributes[p.palette];\n            let pos = this.gameEngine.quantizedPosition(x, y, pal.gridWidth, pal.gridHeight);\n            let scale = pal.scale; //TODO should base this on palette of the cell?\n            let pitch = (pal.gridHeight - pos[1]) + (scale.length * 4);\n            let dur = pal[sound].subdivision;\n\n            let notes = this.gameEngine.queryNotes({            \n                ownerId: p.playerId,\n                palette: p.grid[pos[0]%pal.gridWidth][pos[1]%pal.gridHeight],\n                sound: sound, \n                pitch: pitch, \n                //vel: 1, \n                xPos: pos[0],\n                yPos: pos[1]\n            });\n            if (notes.length) notes[0].dur = '2n';\n            else {\n                let newNote = new Note(this.gameEngine, null, { \n                    ownerId: p.playerId, \n                    palette: p.grid[pos[0]%pal.gridWidth][pos[1]%pal.gridHeight],\n                    sound: sound, \n                    pitch: pitch, \n                    dur: dur,\n                    vel: 1, \n                    xPos: pos[0],\n                    yPos: pos[1]\n                });\n                newNote.inputId = inputId;\n                this.assignObjectToRoom(newNote, p._roomName);\n                this.gameEngine.addObjectToWorld(newNote);\n            }\n        });\n    }\n\n    createSyncServer(roomName) {\n        const startTime = process.hrtime();\n        this.syncServers[roomName] = new SyncServer(() => {\n            let now = process.hrtime(startTime);\n            return now[0] + now[1] * 1e-9;\n        });\n        this.moveTimes[roomName] = 0;\n    }\n\n    assignPlayerToSyncServer(socket, roomName) {\n        this.syncServers[roomName].start(\n        // sync send function\n        (pingId, clientPingTime, serverPingTime, serverPongTime) => {\n            //console.log(`[pong] - id: %s, clientPingTime: %s, serverPingTime: %s, serverPongTime: %s`,\n            //  pingId, clientPingTime, serverPingTime, serverPongTime);\n            const response = [];\n            response[0] = 1; // this is a pong\n            response[1] = pingId;\n            response[2] = clientPingTime;\n            response[3] = serverPingTime;\n            response[4] = serverPongTime;\n            socket.emit('syncServerData', response);\n        }, \n        //sync receive function\n        callback => {\n            socket.on('syncClientData', data => {\n                const request = data;\n\n                if (request[0] === 0) { // this is a ping\n                    const pingId = request[1];\n                    const clientPingTime = request[2];\n\n                    //console.log(`[ping] - pingId: %s, clientPingTime: %s`, clientPingTime);\n\n                    callback(pingId, clientPingTime);\n                }\n            });\n        });\n    }\n\n    onPlayerDisconnected(socketId, playerId) {\n        super.onPlayerDisconnected(socketId, playerId);\n        let player = this.gameEngine.world.queryObject({ playerId });\n        if (player) { \n            let removed = player.number;\n            this.gameEngine.removeObjectFromWorld(player.id);\n            for (let n of this.gameEngine.queryNotes({ ownerId: playerId })) {\n                this.gameEngine.removeObjectFromWorld(n);\n            }\n            for (let room of Object.keys(this.myRooms)) {\n                if (player._roomName === room) {\n                    this.myRooms[room].splice(this.myRooms[room].indexOf(player), 1);\n                    for (let p of this.myRooms[room]) {\n                        if (p.number > removed) p.number--; \n                    }\n                }\n                if (this.myRooms[room].length === 0) {\n                    this.gameEngine.world.forEachObject((objId, obj) => { \n                        if (obj._roomName === room) this.gameEngine.removeObjectFromWorld(objId);\n                    });\n                    delete this.myRooms[room];\n                    delete this.syncServers[room];\n                }\n            }\n        }\n    }\n\n    onBeginPerformance(player) {\n        this.startBuildStage(player);\n    }\n\n    startBuildStage(player) {\n        let r = player._roomName;\n        this.setGameStage(r, 'build');\n        for (let p of this.myRooms[r]) {\n            p.moveTo(p.number * this.gameEngine.playerWidth, 0);\n        }\n        let rand = Math.floor(Math.random()*this.gameEngine.eggSoundsToUse.length);\n        let sound = this.gameEngine.eggSoundsToUse[rand];\n        this.gameEngine.eggSoundsToUse.splice(rand, 1);\n        if (this.gameEngine.eggSoundsToUse.length === 0) this.gameEngine.eggSoundsToUse = this.gameEngine.eggSounds;\n        this.addEgg(sound, r);\n    }\n\n    onEggBroke(e) {\n        this.setGameStage(e._roomName, 'fight');\n    }\n\n    addEgg(sound, roomName) {\n        let newEgg = new Egg(this.gameEngine, null, {   position: this.gameEngine.randPos(roomName), \n                                                        velocity: this.gameEngine.velRandY() });\n        let numPlayers = this.gameEngine.playersByRoom[roomName].length;\n        for (let p of this.myRooms[roomName]) p.ammo += this.gameEngine.startingAmmo;\n        //newEgg.number = 0;\n        newEgg.sound = sound;\n        newEgg.hp = Math.floor((Math.random() * numPlayers * this.gameEngine.eggHPRange) + (numPlayers * this.gameEngine.eggHPMin));\n        this.assignObjectToRoom(newEgg, roomName);\n        this.gameEngine.addObjectToWorld(newEgg);\n    }\n\n    setGameStage(room, stage) {\n        this.roomStages[room] = stage;\n        for (let p of this.myRooms[room])\n            p.stage = stage;\n    }\n\n    preStepLogic() {\n\n    }\n\n    postStepLogic() {\n        for (let room of Object.keys(this.myRooms)) {\n            /*\n            if (this.syncServers[room].getSyncTime() >= this.moveTimes[room]) {\n                this.moveTimes[room] += 2;\n                for (let p of this.myRooms[room]) {\n                    p.move();\n                }\n            } */\n            if (this.roomStages[room] === 'build') {\n                let reload = true;\n                for (let p of this.myRooms[room]) {\n                    if (p.ammo > 0) reload = false;\n                }\n                if (reload) {\n                    for (let p of this.myRooms[room]) {\n                        p.ammo += (this.gameEngine.reloadSize * this.gameEngine.eggsByRoom[room].length);\n                    }\n                }\n            }\n        }\n    }\n\n    getEmptyGridStringByPalette(p) {\n        let gridString = new Array(this.gameEngine.paletteAttributes[p].gridWidth).fill(\n            new Array(this.gameEngine.paletteAttributes[p].gridHeight).fill(p));\n        return JSON.stringify(gridString);\n    }\n}\n"],"file":"InterferenceServerEngine.js"}