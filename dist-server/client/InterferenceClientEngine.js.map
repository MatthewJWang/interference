{"version":3,"sources":["../../src/client/InterferenceClientEngine.js"],"names":["InterferenceClientEngine","gameEngine","options","InterferenceRenderer","syncClient","transport","Transport","player","room","players","eggs","eggSounds","performanceView","viewLock","controls","KeyboardControls","prevState","fullscreen","optionSelection","localControls","currentStep","on","stepLogic","bind","e","onEggBounce","onEggBroke","controlString","state","start","seconds","getSyncTime","pause","elem","renderer","canvas","document","fullscreenElement","requestFullscreen","navigationUI","then","catch","err","exitFullscreen","pointerLockElement","body","mozPointerLockElement","exitPointerLock","requestPointerLock","optionString","console","log","btn","getElementById","roomNameInput","roomNameErrorText","querySelector","onclick","regex","exec","value","assignToRoom","substring","style","display","mozRequestPointerLock","addEventListener","activeElement","code","executeOption","executeLocalControl","reverb","Reverb","toMaster","delay","FeedbackDelay","autowah","AutoWah","connect","synth","Synth","oscillator","type","envelope","attack","decay","sustain","release","eggMelodySynth","PolySynth","events","eggMelodySequence","Sequence","time","step","seqStep","sequences","melody","playStepOnSynth","socket","roomName","startSyncClient","startEffects","startTime","performance","now","SyncClient","pingId","clientPingTime","request","emit","callback","data","response","serverPingTime","serverPongTime","status","bindKey","world","queryObject","playerId","queryObjects","instanceType","Performer","p","gridString","grid","JSON","parse","Object","keys","sound","Egg","stage","nextDiv","includes","toString","constructEggSounds","vol","Math","abs","number","floor","position","x","playerWidth","drone","volume","rampTo","prevStage","positionIsInPlayer","bounce","triggerAttackRelease","triggerRelease","break","generate","scale","paletteAttributes","palette","NoiseSynth","noise","breakSynth","note","playScaleNoteOnSynth","triggerAttack","loop","octaveShift","dur","vel","degree","length","octave","pitch","stepArray","div","getSecondsAtTime","nextSubdivision","ClientEngine"],"mappings":"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","sourcesContent":["import { ClientEngine, KeyboardControls } from 'lance-gg';\nimport SyncClient from '@ircam/sync/client';\nimport InterferenceRenderer from '../client/InterferenceRenderer';\nimport Note from '../common/Note';\nimport Performer from '../common/Performer';\nimport Egg from '../common/Egg';\nimport { Transport, Frequency, Part, Sequence, Synth, MonoSynth, PolySynth, NoiseSynth, FMSynth } from 'tone';\nimport { Reverb, FeedbackDelay, BitCrusher, AutoWah } from 'tone';\n\nexport default class InterferenceClientEngine extends ClientEngine {\n\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    /// INITIALIZATION AND CONNECTION\n    constructor(gameEngine, options) {\n        super(gameEngine, options, InterferenceRenderer);\n\n        this.syncClient = null;\n        this.transport = Transport;\n        this.player = null;\n        this.room = null;\n        this.players = [];\n        this.eggs = [];\n        this.eggSounds = {};\n        this.performanceView = false;\n        this.viewLock = false;\n        this.controls = new KeyboardControls(this);\n        this.prevState = 'setup';\n        this.fullscreen = false;\n        this.optionSelection = {};\n        this.localControls = {\n            //'Backquote': 'ToggleTransport',\n            'KeyF': 'ToggleFullscreen',\n            'KeyH': 'ToggleCursor',\n            'KeyV': 'ToggleView',\n            'Slash': 'ToggleLock'\n        };\n        this.currentStep = null;\n\n        this.gameEngine.on('client__postStep', this.stepLogic.bind(this));\n        this.gameEngine.on('eggBounce', e => { this.onEggBounce(e) });\n        //this.gameEngine.on('playerHitEgg', e => { this.onPlayerHitEgg(e) });\n        this.gameEngine.on('eggBroke', e => { this.onEggBroke(e) });\n    }\n\n    executeLocalControl(controlString) {\n        if (controlString === 'ToggleTransport') {\n            if (this.transport.state !== 'started') {\n                this.transport.start();\n                this.transport.seconds = this.syncClient.getSyncTime();\n                //this.sequencerLoop(0);\n            }   \n            else {\n                this.transport.pause();\n            }\n        }\n        else if (controlString === 'ToggleFullscreen') {\n            if (!this.viewLock) {\n                let elem = this.renderer.canvas;\n                if (!document.fullscreenElement) {\n                    elem.requestFullscreen({navigationUI: 'hide'}).then({}).catch(err => {\n                        //alert(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);\n                    });\n                } else {\n                    document.exitFullscreen();\n                }\n            }\n        }\n        else if (controlString === 'ToggleCursor') {\n            if (!this.viewLock) {\n                if (document.pointerLockElement === document.body || \n                    document.mozPointerLockElement === document.body) {\n                    document.exitPointerLock();\n                } else {\n                    document.body.requestPointerLock();\n                }\n            }\n        }\n        else if (controlString === 'ToggleView') {\n            //console.log('view');\n            if (!this.viewLock) this.performanceView = !this.performanceView;\n        }\n        else if (controlString === 'ToggleLock') {\n            //console.log('lock');\n            this.viewLock = !this.viewLock;\n        }\n    }\n\n    executeOption(optionString) {\n        console.log(optionString);\n    }\n\n    start() {\n        super.start()\n\n        let btn = document.getElementById('startButton');\n        let roomNameInput = document.getElementById('roomNameInput');\n        let roomNameErrorText = document.querySelector('#startMenu .room-input-error');\n\n        btn.onclick = () => {\n            let regex = /^\\w+$/;\n            if (regex.exec(roomNameInput.value) != null) {\n                this.assignToRoom(roomNameInput.value.substring(0, 20));\n            } else {\n                roomNameErrorText.style.display = 'inline';\n            }\n        };\n\n        document.body.requestPointerLock = document.body.requestPointerLock || document.body.mozRequestPointerLock;\n\n        // LOCAL CONTROLS\n        // Any inputs that do nothing server-side (i.e. doesn't need to be known by other players)\n        document.addEventListener('keypress', e => {\n            //console.log(e.code);\n            if (document.activeElement === roomNameInput) {\n                if (e.code === 'Enter') {\n                    let regex = /^\\w+$/;\n                    if (regex.exec(roomNameInput.value) != null) {\n                        this.assignToRoom(roomNameInput.value.substring(0, 20));\n                    } else {\n                        roomNameErrorText.style.display = 'inline';\n                    }\n                }\n            }\n            else {\n                if (this.optionSelection[e.code]) {\n                    this.executeOption(this.optionSelection[e.code]);\n                }\n                if (this.localControls[e.code]) {\n                    this.executeLocalControl(this.localControls[e.code]);\n                }\n            }\n        });\n\n        //this.transport.timeSignature = 4;\n\n        this.reverb = new Reverb(1).toMaster();\n        this.delay = new FeedbackDelay()\n        //this.bitcrusher = new BitCrusher(4).connect(this.reverb); \n        this.autowah = new AutoWah().toMaster()\n        this.autowah.connect(this.reverb);  \n\n        this.synth = new Synth({\n            oscillator: {\n                type: 'sine',\n            },\n            envelope: {\n                attack: 0,\n                decay: 0.1,\n                sustain: 0,\n                release: 0.1,\n            }\n        }).toMaster();\n\n        // BUILDERS\n\n        // Tetris Chain\n        this.eggMelodySynth = new PolySynth(9, Synth).toMaster();\n\n        let events = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n        this.eggMelodySequence = new Sequence((time, step) => {\n            this.currentStep = step;\n            let seqStep = this.player.sequences.melody[step];\n            if (seqStep) this.playStepOnSynth(this.eggMelodySynth, seqStep, 1, time, true);\n        }, events, '16n');\n \n        /*\n        // show try-again button\n        this.gameEngine.on('objectDestroyed', (obj) => {\n            if (obj.playerId === gameEngine.playerId) {\n                document.body.classList.add('lostGame');\n                document.querySelector('#tryAgain').disabled = false;\n            }\n        });\n        */\n        /*\n        this.mouseX = null;\n        this.mouseY = null;\n\n        document.addEventListener('mousemove', this.updateMouseXY.bind(this), false);\n        document.addEventListener('mouseenter', this.updateMouseXY.bind(this), false);\n        document.addEventListener('touchmove', this.updateMouseXY.bind(this), false);\n        document.addEventListener('touchenter', this.updateMouseXY.bind(this), false);\n        this.gameEngine.on('client__preStep', this.sendMouseAngle.bind(this));\n        */\n        \n        /*\n        // click event for \"try again\" button\n        document.querySelector('#tryAgain').addEventListener('click', () => {\n            this.socket.emit('requestRestart');\n        }); */\n        \n        /*\n        document.querySelector('#reconnect').addEventListener('click', () => {\n            window.location.reload();\n        }); */\n\n        //this.controls.bindKey('left', 'left', { repeat: true });\n        //this.controls.bindKey('right', 'right', { repeat: true });\n        //this.controls.bindKey('up', 'up', { repeat: true } );\n    }\n\n    connect(options = {}) {\n        return super.connect().then(() => {\n            this.socket.on('assignedRoom', roomName => { \n                this.room = roomName;\n                this.transport.start();\n                this.startSyncClient(this.socket);\n                this.startEffects();\n            });\n        });\n    }\n\n    startSyncClient(socket) {\n        const startTime = performance.now();\n        this.syncClient = new SyncClient(() => { return (performance.now() - startTime) / 1000 });\n        this.syncClient.start(\n            // send function\n            (pingId, clientPingTime) => {\n                var request = [];\n                request[0] = 0; // we send a ping\n                request[1] = pingId;\n                request[2] = clientPingTime;\n\n                //console.log('[ping] - id: %s, pingTime: %s', request[1], request[2]);\n\n                this.socket.emit('syncClientData', request);\n            },       \n            // receive function  \n            callback => {\n                // unpack args before executing the callback\n                this.socket.on('syncServerData', function (data) {\n                    var response = data;\n\n                    if (response[0] === 1) { // this is a pong\n                        var pingId = response[1];\n                        var clientPingTime = response[2];\n                        var serverPingTime = response[3];\n                        var serverPongTime = response[4];\n\n                        //console.log('[pong] - id: %s, clientPingTime: %s, serverPingTime: %s, serverPongTime: %s',\n                        //pingId, clientPingTime, serverPingTime, serverPongTime);\n\n                        callback(pingId, clientPingTime, serverPingTime, serverPongTime);\n                    }\n                });\n            }, \n            // status report function\n            status => { }//console.log(status); }\n        );\n    }\n\n    assignToRoom(roomName) {\n        if (this.socket) {\n            this.socket.emit('assignToRoom', roomName);\n            document.getElementById('startMenuWrapper').style.display = 'none';\n            // NETWORKED CONTROLS\n            // These inputs will also be processed on the server\n            //console.log('binding keys');\n            //this.controls.bindKey('space', 'space');\n            this.controls.bindKey('open bracket', '[');\n            this.controls.bindKey('close bracket / å', ']');\n            this.controls.bindKey('n', 'n');\n            this.controls.bindKey('b', 'b'); // begin\n            this.controls.bindKey('c', 'c'); // change color\n            this.controls.bindKey('q', 'q');\n            this.controls.bindKey('w', 'w');\n            this.controls.bindKey('e', 'e');\n        }\n    } \n\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    /// SOUND HANDLING AND CLIENT LOGIC\n\n    stepLogic() {\n        if (this.room == null) return //if we yet to be assigned a room, don't do this stuff\n        this.player = this.gameEngine.world.queryObject({ playerId: this.gameEngine.playerId });\n        this.players = this.gameEngine.world.queryObjects({ instanceType: Performer });\n        for (let p of this.players) {\n            if (p.gridString != null) p.grid = JSON.parse(p.gridString);\n            for (let sound of Object.keys(p.sequences)) {\n                p.sequences[sound] = JSON.parse(p[sound]);\n            }\n        }\n        this.eggs = this.gameEngine.world.queryObjects({ instanceType: Egg });\n        let stage = this.player.stage;\n        if (stage === 'setup') {\n\n        }\n        else if (stage === 'intro') {\n            if (this.transport.state !== 'started') {// && this.prevStage !== stage) {\n                this.transport.start();\n                this.transport.seconds = this.syncClient.getSyncTime();\n            }\n            if (this.eggMelodySequence.state !== 'started') {\n                //console.log('start seq');\n                this.eggMelodySequence.start(this.nextDiv('1m'));\n            }\n            for (let e of this.eggs) {\n                if (!Object.keys(this.eggSounds).includes(e.toString())) this.constructEggSounds(e);\n                let vol = 1 - (0.3 * Math.abs(this.player.number - Math.floor(e.position.x / this.gameEngine.playerWidth)));\n                if (vol < 0) vol = 0;\n                this.eggSounds[e.toString()].drone.volume.rampTo(vol, 0.1);\n            }\n        }\n        this.prevStage = stage;\n    }\n\n    onEggBounce(e) {\n        if (!Object.keys(this.eggSounds).includes(e.toString())) this.constructEggSounds(e);\n        if (this.gameEngine.positionIsInPlayer(e.position.x, this.player)) {\n            this.eggSounds[e.toString()].bounce.triggerAttackRelease('8n');\n        }\n    }\n\n    onEggBroke(e) {\n        console.log('egg broke');\n        this.eggSounds[e.toString()].drone.triggerRelease();\n        if (this.gameEngine.positionIsInPlayer(e.position.x, this.player)) {\n            this.eggSounds[e.toString()].break.start(this.nextDiv('4n'));\n            this.optionSelection['Digit1'] = 'tetrisChain';\n        }\n    }\n\n    startEffects() {\n        //this.bitcrusher.start();\n        this.reverb.generate();\n    }\n\n    constructEggSounds(e) {\n        //console.log('making egg sounds');\n        let scale = this.gameEngine.paletteAttributes[this.player.palette].scale;\n        let synth = new Synth({\n            oscillator: {\n                type: 'triangle',\n            },\n            envelope: {\n                attack: 0.005,\n                decay: 0.5,\n                sustain: 0,\n                release: 0.1,\n            }\n        });\n        this.eggSounds[e.toString()] = {\n            drone: new NoiseSynth({\n                noise: {\n                    type: 'pink',\n                },\n                envelope: {\n                    attack: 1,\n                    decay: 0.1,\n                    sustain: 1,\n                    release: 0.5,\n                }\n            }),\n            bounce: new NoiseSynth({\n                noise: {\n                    type: 'pink',\n                },\n                envelope: {\n                    attack: 0.01,\n                    decay: 0.3,\n                    sustain: 0.1,\n                    release: 0.5,\n                }\n            }).toMaster(),\n            breakSynth: synth.toMaster(), \n            break: new Sequence((time, note) => {\n                let scale = this.gameEngine.paletteAttributes[this.player.palette].scale;\n                this.playScaleNoteOnSynth(synth, note, scale, 6, '64n', time, 0.5);\n            }, [[0, 1, 2, 3, 1, 2, 3, 4], null, null, null], '4n')\n        };\n\n        this.eggSounds[e.toString()].drone.connect(this.autowah);\n        this.eggSounds[e.toString()].bounce.connect(this.reverb);\n        this.eggSounds[e.toString()].breakSynth.connect(this.reverb);\n        this.eggSounds[e.toString()].drone.triggerAttack('+0', 0.1);\n        this.eggSounds[e.toString()].break.loop = true;\n    }\n\n    playScaleNoteOnSynth(synth, note, scale, octaveShift, dur, time, vel) {\n        if (!note) return;\n        //console.log(note);\n        let degree = note % scale.length;\n        let octave = Math.floor(note / scale.length) + octaveShift;\n        let pitch = Frequency(scale[degree] + (12 * octave), 'midi');\n        //console.log(scale[degree] + (12 * octave));\n        synth.triggerAttackRelease(pitch, dur, time, vel);\n    }\n\n    playStepOnSynth(synth, stepArray, octaveShift, time) {\n        if (!stepArray) return;\n\n        //console.log(note);\n        for (let note of stepArray) {\n            //let scale = this.gameEngine.paletteAttributes[this.player.grid[note.cell.x][note.cell.y]];\n            let scale = this.gameEngine.paletteAttributes[this.player.palette].scale;\n            this.playScaleNoteOnSynth(synth, note.pitch, scale, octaveShift, note.dur, time, note.vel);\n        }\n    }\n\n    nextDiv(div) {\n        return Transport.getSecondsAtTime(Transport.nextSubdivision(div));\n    }\n    /*\n    sequencerLoop(thisTime) {\n        this.rhythmstack = ['4n'];\n        console.log('step');\n        if (this.notestack.length && this.rhythmstack.length) {\n            if (noteIndex >= this.notestack.length) noteIndex = 0;\n            if (rhythmIndex >= this.rhythmstack.length) rhythmIndex = 0;\n            this.synth.triggerAttackRelease(this.notestack[noteIndex], '8n', thisTime)\n            this.transport.scheduleOnce(nextTime => { this.sequencerLoop(nextTime); }, \n                Transport.getSecondsAtTime(Transport.nextSubdivision(this.rhythmstack[rhythmIndex]))\n            );\n            noteIndex++;\n            rhythmIndex++;\n        }\n        else {\n            noteIndex = 0;\n            rhythmIndex = 0;\n            this.transport.scheduleOnce(nextTime => { this.sequencerLoop(nextTime) }, \n                Transport.getSecondsAtTime(Transport.nextSubdivision('1m'))\n            );\n        }\n    }\n    */\n    /*\n    updateMouseXY(e) {\n        e.preventDefault();\n        if (e.touches) e = e.touches.item(0);\n        this.mouseX = e.pageX;\n        this.mouseY = e.pageY;\n    }\n\n    sendMouseAngle() {\n        let player = this.gameEngine.world.queryObject({ playerId: this.gameEngine.playerId });\n        if (this.mouseY === null || player === null) return;\n\n        let mouseX = (this.mouseX - document.body.clientWidth/2) / this.zoom;\n        let mouseY = (this.mouseY - document.body.clientHeight/2) / this.zoom;\n        let dx = mouseY - player.position.y;\n        let dy = mouseX - player.position.x;\n        if (Math.sqrt(dx * dx + dy * dy) < 0.5) {\n            this.sendInput(this.gameEngine.directionStop, { movement: true });\n            return;\n        }\n\n        let angle = Math.atan2(dx, dy);\n        this.sendInput(angle, { movement: true });\n    }\n    */\n}\n"],"file":"InterferenceClientEngine.js"}