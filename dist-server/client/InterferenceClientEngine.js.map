{"version":3,"sources":["../../src/client/InterferenceClientEngine.js"],"names":["durs","noteIndex","rhythmIndex","viewLock","InterferenceClientEngine","gameEngine","options","InterferenceRenderer","syncClient","transport","Transport","notestack","rhythmstack","room","performanceView","controls","KeyboardControls","btn","document","getElementById","roomNameInput","roomNameErrorText","querySelector","onclick","regex","exec","value","assignToRoom","substring","style","display","addEventListener","e","console","log","code","activeElement","state","start","seconds","getSyncTime","sequencerLoop","pause","synth","Synth","oscillator","type","modulationFrequency","envelope","attack","decay","sustain","release","toMaster","then","socket","on","roomName","startTime","performance","now","SyncClient","pingId","clientPingTime","request","emit","callback","data","response","serverPingTime","serverPongTime","status","bindKey","thisTime","length","triggerAttackRelease","scheduleOnce","nextTime","getSecondsAtTime","nextSubdivision","ClientEngine"],"mappings":"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","sourcesContent":["import { ClientEngine, KeyboardControls } from 'lance-gg';\nimport SyncClient from '@ircam/sync/client';\nimport InterferenceRenderer from '../client/InterferenceRenderer';\nimport { Transport, Synth, Frequency } from 'tone';\n\nconst durs = ['4n', '8n', '6n'];\nlet noteIndex = 0;\nlet rhythmIndex = 0;\nlet viewLock = false;\n\nexport default class InterferenceClientEngine extends ClientEngine {\n\n    constructor(gameEngine, options) {\n        super(gameEngine, options, InterferenceRenderer);\n\n        this.syncClient = null;\n        this.transport = Transport;\n        this.notestack = [];\n        this.rhythmstack = ['4n'];\n        this.room = null;\n        this.performanceView = false;\n        this.controls = new KeyboardControls(this);\n    }\n\n    start() {\n        super.start()\n\n        let btn = document.getElementById('startButton');\n        let roomNameInput = document.getElementById('roomNameInput');\n        let roomNameErrorText = document.querySelector('#startMenu .room-input-error');\n\n        btn.onclick = () => {\n            let regex = /^\\w+$/;\n            if (regex.exec(roomNameInput.value) !== null) {\n                this.assignToRoom(roomNameInput.value.substring(0, 20));\n            } else {\n                roomNameErrorText.style.display = 'inline';\n            }\n        };\n\n        // LOCAL CONTROLS\n        // Any inputs that do nothing server-side (i.e. doesn't need to be known by other players)\n        document.addEventListener('keypress', e => {\n            console.log(e.code);\n            if (document.activeElement === roomNameInput) {\n                if (e.code === 'Enter') {\n                    let regex = /^\\w+$/;\n                    if (regex.exec(roomNameInput.value) !== null) {\n                        this.assignToRoom(roomNameInput.value.substring(0, 20));\n                    } else {\n                        roomNameErrorText.style.display = 'inline';\n                    }\n                }\n            }\n            else {\n                if (e.code === 'Space') {\n                    console.log('space');\n                    if (this.transport.state !== 'started') {\n                        this.transport.start();\n                        this.transport.seconds = this.syncClient.getSyncTime();\n                        this.sequencerLoop(0);\n                    }   \n                    else {\n                        this.transport.pause();\n                    }\n                }\n                else if (e.code === 'KeyV') {\n                    console.log('view');\n                    if (!viewLock) this.performanceView = !this.performanceView;\n                }\n                else if (e.code === 'Slash') {\n                    console.log('lock');\n                    viewLock = !viewLock;\n                }\n            }\n        });\n\n        this.synth = new Synth({\n            oscillator: {\n                type: 'sine',\n                modulationFrequency: 0.2\n            },\n            envelope: {\n                attack: 0,\n                decay: 0.1,\n                sustain: 0,\n                release: 0.1,\n            }\n        }).toMaster();\n \n        /*\n        // show try-again button\n        this.gameEngine.on('objectDestroyed', (obj) => {\n            if (obj.playerId === gameEngine.playerId) {\n                document.body.classList.add('lostGame');\n                document.querySelector('#tryAgain').disabled = false;\n            }\n        });\n        */\n        /*\n        this.mouseX = null;\n        this.mouseY = null;\n\n        document.addEventListener('mousemove', this.updateMouseXY.bind(this), false);\n        document.addEventListener('mouseenter', this.updateMouseXY.bind(this), false);\n        document.addEventListener('touchmove', this.updateMouseXY.bind(this), false);\n        document.addEventListener('touchenter', this.updateMouseXY.bind(this), false);\n        this.gameEngine.on('client__preStep', this.sendMouseAngle.bind(this));\n        */\n        \n        /*\n        // click event for \"try again\" button\n        document.querySelector('#tryAgain').addEventListener('click', () => {\n            this.socket.emit('requestRestart');\n        }); */\n        \n        /*\n        document.querySelector('#reconnect').addEventListener('click', () => {\n            window.location.reload();\n        }); */\n\n        //this.controls.bindKey('left', 'left', { repeat: true });\n        //this.controls.bindKey('right', 'right', { repeat: true });\n        //this.controls.bindKey('up', 'up', { repeat: true } );\n    }\n\n    connect(options = {}) {\n        return super.connect().then(() => {\n            this.socket.on('assignedRoom', roomName => { \n                this.room = roomName;\n                const startTime = performance.now();\n                this.syncClient = new SyncClient(() => { return (performance.now() - startTime) / 1000 });\n                this.syncClient.start(\n                    // send function\n                    (pingId, clientPingTime) => {\n                        var request = [];\n                        request[0] = 0; // we send a ping\n                        request[1] = pingId;\n                        request[2] = clientPingTime;\n\n                        //console.log('[ping] - id: %s, pingTime: %s', request[1], request[2]);\n\n                        this.socket.emit('syncClientData', request);\n                    },       \n                    // receive function  \n                    callback => {\n                        // unpack args before executing the callback\n                        this.socket.on('syncServerData', function (data) {\n                            var response = data;\n\n                            if (response[0] === 1) { // this is a pong\n                                var pingId = response[1];\n                                var clientPingTime = response[2];\n                                var serverPingTime = response[3];\n                                var serverPongTime = response[4];\n\n                                //console.log('[pong] - id: %s, clientPingTime: %s, serverPingTime: %s, serverPongTime: %s',\n                                //pingId, clientPingTime, serverPingTime, serverPongTime);\n\n                                callback(pingId, clientPingTime, serverPingTime, serverPongTime);\n                            }\n                        });\n                    }, \n                    // status report function\n                    status => { }//console.log(status); }\n                );\n            });\n        });\n    }\n\n    assignToRoom(roomName) {\n        if (this.socket) {\n            this.socket.emit('assignToRoom', roomName);\n            document.getElementById('startMenuWrapper').style.display = 'none';\n            // NETWORKED CONTROLS\n            // These inputs will also be processed on the server\n            console.log('binding keys');\n            //this.controls.bindKey('space', 'space');\n            this.controls.bindKey('n', 'n');\n            this.controls.bindKey('b', 'b'); // begin\n            this.controls.bindKey('c', 'c'); // change color\n        }\n    }\n\n    sequencerLoop(thisTime) {\n        this.rhythmstack = ['4n'];\n        console.log('step');\n        if (this.notestack.length && this.rhythmstack.length) {\n            if (noteIndex >= this.notestack.length) noteIndex = 0;\n            if (rhythmIndex >= this.rhythmstack.length) rhythmIndex = 0;\n            this.synth.triggerAttackRelease(this.notestack[noteIndex], '8n', thisTime)\n            this.transport.scheduleOnce(nextTime => { this.sequencerLoop(nextTime); }, \n                Transport.getSecondsAtTime(Transport.nextSubdivision(this.rhythmstack[rhythmIndex]))\n            );\n            noteIndex++;\n            rhythmIndex++;\n        }\n        else {\n            noteIndex = 0;\n            rhythmIndex = 0;\n            this.transport.scheduleOnce(nextTime => { this.sequencerLoop(nextTime) }, \n                Transport.getSecondsAtTime(Transport.nextSubdivision('1m'))\n            );\n        }\n    }\n\n    /*\n    updateMouseXY(e) {\n        e.preventDefault();\n        if (e.touches) e = e.touches.item(0);\n        this.mouseX = e.pageX;\n        this.mouseY = e.pageY;\n    }\n\n    sendMouseAngle() {\n        let player = this.gameEngine.world.queryObject({ playerId: this.gameEngine.playerId });\n        if (this.mouseY === null || player === null) return;\n\n        let mouseX = (this.mouseX - document.body.clientWidth/2) / this.zoom;\n        let mouseY = (this.mouseY - document.body.clientHeight/2) / this.zoom;\n        let dx = mouseY - player.position.y;\n        let dy = mouseX - player.position.x;\n        if (Math.sqrt(dx * dx + dy * dy) < 0.5) {\n            this.sendInput(this.gameEngine.directionStop, { movement: true });\n            return;\n        }\n\n        let angle = Math.atan2(dx, dy);\n        this.sendInput(angle, { movement: true });\n    }\n    */\n}\n"],"file":"InterferenceClientEngine.js"}