{"version":3,"sources":["../../src/client/InterferenceClientEngine.js"],"names":["durs","noteIndex","rhythmIndex","viewLock","InterferenceClientEngine","gameEngine","options","InterferenceRenderer","syncClient","transport","Transport","player","room","players","eggs","eggSounds","performanceView","controls","KeyboardControls","prevState","on","stepLogic","bind","e","onEggBounce","btn","document","getElementById","roomNameInput","roomNameErrorText","querySelector","onclick","regex","exec","value","assignToRoom","substring","style","display","addEventListener","console","log","code","activeElement","state","start","seconds","getSyncTime","pause","reverb","Reverb","toMaster","generate","bitcrusher","BitCrusher","autowah","AutoWah","connect","synth","Synth","oscillator","type","modulationFrequency","envelope","attack","decay","sustain","release","tetrisChainSynth","tetrisChainSequence","Sequence","time","note","triggerAttackRelease","then","socket","roomName","startSyncClient","startEffects","startTime","performance","now","SyncClient","pingId","clientPingTime","request","emit","callback","data","response","serverPingTime","serverPongTime","status","bindKey","world","queryObject","playerId","queryObjects","instanceType","Performer","Egg","stage","prevStage","Object","keys","includes","toString","constructEggSounds","vol","Math","abs","number","floor","position","x","playerWidth","drone","volume","rampTo","leftBound","rightBound","bounce","NoiseSynth","noise","triggerAttack","ClientEngine"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,IAAI,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAb;AACA,IAAIC,SAAS,GAAG,CAAhB;AACA,IAAIC,WAAW,GAAG,CAAlB;AACA,IAAIC,QAAQ,GAAG,KAAf;;IAEqBC,wB;;;;;AAEjB;AACA,oCAAYC,UAAZ,EAAwBC,OAAxB,EAAiC;AAAA;;AAAA;;AAC7B,kGAAMD,UAAN,EAAkBC,OAAlB,EAA2BC,6BAA3B;AAEA,UAAKC,UAAL,GAAkB,IAAlB;AACA,UAAKC,SAAL,GAAiBC,eAAjB;AACA,UAAKC,MAAL,GAAc,IAAd;AACA,UAAKC,IAAL,GAAY,IAAZ;AACA,UAAKC,OAAL,GAAe,EAAf;AACA,UAAKC,IAAL,GAAY,EAAZ;AACA,UAAKC,SAAL,GAAiB,EAAjB;AACA,UAAKC,eAAL,GAAuB,KAAvB;AACA,UAAKC,QAAL,GAAgB,IAAIC,yBAAJ,+BAAhB;AACA,UAAKC,SAAL,GAAiB,OAAjB;;AAEA,UAAKd,UAAL,CAAgBe,EAAhB,CAAmB,kBAAnB,EAAuC,MAAKC,SAAL,CAAeC,IAAf,+BAAvC;;AACA,UAAKjB,UAAL,CAAgBe,EAAhB,CAAmB,WAAnB,EAAgC,UAAAG,CAAC,EAAI;AAAE,YAAKC,WAAL,CAAiBD,CAAjB;AAAqB,KAA5D;;AAf6B;AAgBhC;;;;4BAEO;AAAA;;AACJ;;AAEA,UAAIE,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAV;AACA,UAAIC,aAAa,GAAGF,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAApB;AACA,UAAIE,iBAAiB,GAAGH,QAAQ,CAACI,aAAT,CAAuB,8BAAvB,CAAxB;;AAEAL,MAAAA,GAAG,CAACM,OAAJ,GAAc,YAAM;AAChB,YAAIC,KAAK,GAAG,OAAZ;;AACA,YAAIA,KAAK,CAACC,IAAN,CAAWL,aAAa,CAACM,KAAzB,MAAoC,IAAxC,EAA8C;AAC1C,UAAA,MAAI,CAACC,YAAL,CAAkBP,aAAa,CAACM,KAAd,CAAoBE,SAApB,CAA8B,CAA9B,EAAiC,EAAjC,CAAlB;AACH,SAFD,MAEO;AACHP,UAAAA,iBAAiB,CAACQ,KAAlB,CAAwBC,OAAxB,GAAkC,QAAlC;AACH;AACJ,OAPD,CAPI,CAgBJ;AACA;;;AACAZ,MAAAA,QAAQ,CAACa,gBAAT,CAA0B,UAA1B,EAAsC,UAAAhB,CAAC,EAAI;AACvCiB,QAAAA,OAAO,CAACC,GAAR,CAAYlB,CAAC,CAACmB,IAAd;;AACA,YAAIhB,QAAQ,CAACiB,aAAT,KAA2Bf,aAA/B,EAA8C;AAC1C,cAAIL,CAAC,CAACmB,IAAF,KAAW,OAAf,EAAwB;AACpB,gBAAIV,KAAK,GAAG,OAAZ;;AACA,gBAAIA,KAAK,CAACC,IAAN,CAAWL,aAAa,CAACM,KAAzB,MAAoC,IAAxC,EAA8C;AAC1C,cAAA,MAAI,CAACC,YAAL,CAAkBP,aAAa,CAACM,KAAd,CAAoBE,SAApB,CAA8B,CAA9B,EAAiC,EAAjC,CAAlB;AACH,aAFD,MAEO;AACHP,cAAAA,iBAAiB,CAACQ,KAAlB,CAAwBC,OAAxB,GAAkC,QAAlC;AACH;AACJ;AACJ,SATD,MAUK;AACD,cAAIf,CAAC,CAACmB,IAAF,KAAW,WAAf,EAA4B;AACxB,gBAAI,MAAI,CAACjC,SAAL,CAAemC,KAAf,KAAyB,SAA7B,EAAwC;AACpC,cAAA,MAAI,CAACnC,SAAL,CAAeoC,KAAf;;AACA,cAAA,MAAI,CAACpC,SAAL,CAAeqC,OAAf,GAAyB,MAAI,CAACtC,UAAL,CAAgBuC,WAAhB,EAAzB,CAFoC,CAGpC;AACH,aAJD,MAKK;AACD,cAAA,MAAI,CAACtC,SAAL,CAAeuC,KAAf;AACH;AACJ,WATD,MAUK,IAAIzB,CAAC,CAACmB,IAAF,KAAW,MAAf,EAAuB;AACxBF,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,gBAAI,CAACtC,QAAL,EAAe,MAAI,CAACa,eAAL,GAAuB,CAAC,MAAI,CAACA,eAA7B;AAClB,WAHI,MAIA,IAAIO,CAAC,CAACmB,IAAF,KAAW,OAAf,EAAwB;AACzBF,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAtC,YAAAA,QAAQ,GAAG,CAACA,QAAZ;AACH;AACJ;AACJ,OAhCD,EAlBI,CAoDJ;;AAEA,WAAK8C,MAAL,GAAc,IAAIC,YAAJ,CAAW,CAAX,EAAcC,QAAd,EAAd;AACA,WAAKF,MAAL,CAAYG,QAAZ;AACA,WAAKC,UAAL,GAAkB,IAAIC,gBAAJ,CAAe,CAAf,EAAkBH,QAAlB,EAAlB;AACA,WAAKI,OAAL,GAAe,IAAIC,aAAJ,GAAcC,OAAd,CAAsB,KAAKR,MAA3B,CAAf;AAEA,WAAKS,KAAL,GAAa,IAAIC,WAAJ,CAAU;AACnBC,QAAAA,UAAU,EAAE;AACRC,UAAAA,IAAI,EAAE,MADE;AAERC,UAAAA,mBAAmB,EAAE;AAFb,SADO;AAKnBC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,MAAM,EAAE,CADF;AAENC,UAAAA,KAAK,EAAE,GAFD;AAGNC,UAAAA,OAAO,EAAE,CAHH;AAINC,UAAAA,OAAO,EAAE;AAJH;AALS,OAAV,EAWVhB,QAXU,EAAb,CA3DI,CAwEJ;AAEA;;AACA,WAAKiB,gBAAL,GAAwB,IAAIT,WAAJ,CAAU;AAC9BC,QAAAA,UAAU,EAAE;AACRC,UAAAA,IAAI,EAAE,UADE;AAERC,UAAAA,mBAAmB,EAAE;AAFb,SADkB;AAK9BC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,MAAM,EAAE,GADF;AAENC,UAAAA,KAAK,EAAE,GAFD;AAGNC,UAAAA,OAAO,EAAE,GAHH;AAINC,UAAAA,OAAO,EAAE;AAJH;AALoB,OAAV,EAWrBhB,QAXqB,EAAxB;AAaA,WAAKkB,mBAAL,GAA2B,IAAIC,cAAJ,CAAa,UAASC,IAAT,EAAeC,IAAf,EAAoB;AACxD,aAAKJ,gBAAL,CAAsBK,oBAAtB,CAA2CD,IAA3C,EAAiD,KAAjD,EAAwDD,IAAxD;AACH,OAF0B,EAExB,EAFwB,EAEpB,IAFoB,CAA3B;AAIA;;;;;;;;;;AASA;;;;;;;;;;AAWA;;;;;;AAMA;;;;AAKA;AACA;AACA;AACH;;;8BAEqB;AAAA;;AAAA,UAAdjE,OAAc,uEAAJ,EAAI;AAClB,aAAO,sFAAgBoE,IAAhB,CAAqB,YAAM;AAC9B,QAAA,MAAI,CAACC,MAAL,CAAYvD,EAAZ,CAAe,cAAf,EAA+B,UAAAwD,QAAQ,EAAI;AACvC,UAAA,MAAI,CAAChE,IAAL,GAAYgE,QAAZ;;AACA,UAAA,MAAI,CAACnE,SAAL,CAAeoC,KAAf;;AACA,UAAA,MAAI,CAACgC,eAAL,CAAqB,MAAI,CAACF,MAA1B;;AACA,UAAA,MAAI,CAACG,YAAL;AACH,SALD;AAMH,OAPM,CAAP;AAQH;;;oCAEeH,M,EAAQ;AAAA;;AACpB,UAAMI,SAAS,GAAGC,WAAW,CAACC,GAAZ,EAAlB;AACA,WAAKzE,UAAL,GAAkB,IAAI0E,eAAJ,CAAe,YAAM;AAAE,eAAO,CAACF,WAAW,CAACC,GAAZ,KAAoBF,SAArB,IAAkC,IAAzC;AAA+C,OAAtE,CAAlB;AACA,WAAKvE,UAAL,CAAgBqC,KAAhB,EACI;AACA,gBAACsC,MAAD,EAASC,cAAT,EAA4B;AACxB,YAAIC,OAAO,GAAG,EAAd;AACAA,QAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,CAAb,CAFwB,CAER;;AAChBA,QAAAA,OAAO,CAAC,CAAD,CAAP,GAAaF,MAAb;AACAE,QAAAA,OAAO,CAAC,CAAD,CAAP,GAAaD,cAAb,CAJwB,CAMxB;;AAEA,QAAA,MAAI,CAACT,MAAL,CAAYW,IAAZ,CAAiB,gBAAjB,EAAmCD,OAAnC;AACH,OAXL,EAYI;AACA,gBAAAE,QAAQ,EAAI;AACR;AACA,QAAA,MAAI,CAACZ,MAAL,CAAYvD,EAAZ,CAAe,gBAAf,EAAiC,UAAUoE,IAAV,EAAgB;AAC7C,cAAIC,QAAQ,GAAGD,IAAf;;AAEA,cAAIC,QAAQ,CAAC,CAAD,CAAR,KAAgB,CAApB,EAAuB;AAAE;AACrB,gBAAIN,MAAM,GAAGM,QAAQ,CAAC,CAAD,CAArB;AACA,gBAAIL,cAAc,GAAGK,QAAQ,CAAC,CAAD,CAA7B;AACA,gBAAIC,cAAc,GAAGD,QAAQ,CAAC,CAAD,CAA7B;AACA,gBAAIE,cAAc,GAAGF,QAAQ,CAAC,CAAD,CAA7B,CAJmB,CAMnB;AACA;;AAEAF,YAAAA,QAAQ,CAACJ,MAAD,EAASC,cAAT,EAAyBM,cAAzB,EAAyCC,cAAzC,CAAR;AACH;AACJ,SAdD;AAeH,OA9BL,EA+BI;AACA,gBAAAC,MAAM,EAAI,CAAG,CAhCjB,CAgCiB;AAhCjB;AAkCH;;;iCAEYhB,Q,EAAU;AACnB,UAAI,KAAKD,MAAT,EAAiB;AACb,aAAKA,MAAL,CAAYW,IAAZ,CAAiB,cAAjB,EAAiCV,QAAjC;AACAlD,QAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CU,KAA5C,CAAkDC,OAAlD,GAA4D,MAA5D,CAFa,CAGb;AACA;;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EALa,CAMb;;AACA,aAAKxB,QAAL,CAAc4E,OAAd,CAAsB,cAAtB,EAAsC,GAAtC;AACA,aAAK5E,QAAL,CAAc4E,OAAd,CAAsB,mBAAtB,EAA2C,GAA3C;AACA,aAAK5E,QAAL,CAAc4E,OAAd,CAAsB,GAAtB,EAA2B,GAA3B;AACA,aAAK5E,QAAL,CAAc4E,OAAd,CAAsB,GAAtB,EAA2B,GAA3B,EAVa,CAUoB;;AACjC,aAAK5E,QAAL,CAAc4E,OAAd,CAAsB,GAAtB,EAA2B,GAA3B,EAXa,CAWoB;AACpC;AACJ,K,CAED;AACA;;;;gCAEY;AACR,UAAI,KAAKjF,IAAL,KAAc,IAAlB,EAAwB,OADhB,CACuB;;AAC/B,WAAKD,MAAL,GAAc,KAAKN,UAAL,CAAgByF,KAAhB,CAAsBC,WAAtB,CAAkC;AAAEC,QAAAA,QAAQ,EAAE,KAAK3F,UAAL,CAAgB2F;AAA5B,OAAlC,CAAd;AACA,WAAKnF,OAAL,GAAe,KAAKR,UAAL,CAAgByF,KAAhB,CAAsBG,YAAtB,CAAmC;AAAEC,QAAAA,YAAY,EAAEC;AAAhB,OAAnC,CAAf;AACA,WAAKrF,IAAL,GAAY,KAAKT,UAAL,CAAgByF,KAAhB,CAAsBG,YAAtB,CAAmC;AAAEC,QAAAA,YAAY,EAAEE;AAAhB,OAAnC,CAAZ;AACA,UAAIC,KAAK,GAAG,KAAK1F,MAAL,CAAY0F,KAAxB;;AACA,UAAIA,KAAK,KAAK,OAAd,EAAuB,CAEtB,CAFD,MAGK,IAAIA,KAAK,KAAK,OAAd,EAAuB;AACxB,YAAI,KAAK5F,SAAL,CAAemC,KAAf,KAAyB,SAAzB,IAAsC,KAAK0D,SAAL,KAAmBD,KAA7D,EAAoE;AAChE,eAAK5F,SAAL,CAAeoC,KAAf;AACA,eAAKpC,SAAL,CAAeqC,OAAf,GAAyB,KAAKtC,UAAL,CAAgBuC,WAAhB,EAAzB;AACH;;AAJuB;AAAA;AAAA;;AAAA;AAKxB,+BAAc,KAAKjC,IAAnB,8HAAyB;AAAA,gBAAhBS,CAAgB;AACrB,gBAAI,CAACgF,MAAM,CAACC,IAAP,CAAY,KAAKzF,SAAjB,EAA4B0F,QAA5B,CAAqClF,CAAC,CAACmF,QAAF,EAArC,CAAL,EAAyD,KAAKC,kBAAL,CAAwBpF,CAAxB;AACzD,gBAAIqF,GAAG,GAAG,IAAK,MAAMC,IAAI,CAACC,GAAL,CAAS,KAAKnG,MAAL,CAAYoG,MAAZ,GAAqBF,IAAI,CAACG,KAAL,CAAWzF,CAAC,CAAC0F,QAAF,CAAWC,CAAX,GAAe,KAAK7G,UAAL,CAAgB8G,WAA1C,CAA9B,CAArB;AACA,gBAAIP,GAAG,GAAG,CAAV,EAAaA,GAAG,GAAG,CAAN;AACb,iBAAK7F,SAAL,CAAeQ,CAAC,CAACmF,QAAF,EAAf,EAA6BU,KAA7B,CAAmCC,MAAnC,CAA0CC,MAA1C,CAAiDV,GAAjD,EAAsD,GAAtD;AACH;AAVuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW3B;;AACD,WAAKN,SAAL,GAAiBD,KAAjB;AACH;;;gCAEW9E,C,EAAG;AACX,UAAI,CAACgF,MAAM,CAACC,IAAP,CAAY,KAAKzF,SAAjB,EAA4B0F,QAA5B,CAAqClF,CAAC,CAACmF,QAAF,EAArC,CAAL,EAAyD,KAAKC,kBAAL,CAAwBpF,CAAxB;AACzD,UAAIgG,SAAS,GAAG,KAAK5G,MAAL,CAAYoG,MAAZ,GAAqB,KAAK1G,UAAL,CAAgB8G,WAArD;AACA,UAAIK,UAAU,GAAG,CAAC,KAAK7G,MAAL,CAAYoG,MAAZ,GAAqB,CAAtB,IAA2B,KAAK1G,UAAL,CAAgB8G,WAA5D;;AACA,UAAII,SAAS,GAAGhG,CAAC,CAAC0F,QAAF,CAAWC,CAAvB,IAA4B3F,CAAC,CAAC0F,QAAF,CAAWC,CAAX,GAAeM,UAA/C,EAA2D;AACvD,aAAKzG,SAAL,CAAeQ,CAAC,CAACmF,QAAF,EAAf,EAA6Be,MAA7B,CAAoChD,oBAApC,CAAyD,IAAzD;AACH;AACJ;;;mCAEc,CACX;AACH;;;uCAEkBlD,C,EAAG;AAClB;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,CAAC,CAACmF,QAAF,EAAZ;AACA,WAAK3F,SAAL,CAAeQ,CAAC,CAACmF,QAAF,EAAf,IAA+B;AAC3BU,QAAAA,KAAK,EAAE,IAAIM,gBAAJ,CAAe;AAClBC,UAAAA,KAAK,EAAE;AACH9D,YAAAA,IAAI,EAAE;AADH,WADW;AAIlBE,UAAAA,QAAQ,EAAE;AACNC,YAAAA,MAAM,EAAE,CADF;AAENC,YAAAA,KAAK,EAAE,GAFD;AAGNC,YAAAA,OAAO,EAAE,CAHH;AAINC,YAAAA,OAAO,EAAE;AAJH;AAJQ,SAAf,CADoB;AAY3BsD,QAAAA,MAAM,EAAE,IAAIC,gBAAJ,CAAe;AACnBC,UAAAA,KAAK,EAAE;AACH9D,YAAAA,IAAI,EAAE;AADH,WADY;AAInBE,UAAAA,QAAQ,EAAE;AACNC,YAAAA,MAAM,EAAE,IADF;AAENC,YAAAA,KAAK,EAAE,GAFD;AAGNC,YAAAA,OAAO,EAAE,GAHH;AAINC,YAAAA,OAAO,EAAE;AAJH;AAJS,SAAf;AAZmB,OAA/B;AAyBA,WAAKpD,SAAL,CAAeQ,CAAC,CAACmF,QAAF,EAAf,EAA6BU,KAA7B,CAAmC3D,OAAnC,CAA2C,KAAKF,OAAhD;AACA,WAAKxC,SAAL,CAAeQ,CAAC,CAACmF,QAAF,EAAf,EAA6Be,MAA7B,CAAoChE,OAApC,CAA4C,KAAKF,OAAjD;AACA,WAAKxC,SAAL,CAAeQ,CAAC,CAACmF,QAAF,EAAf,EAA6BU,KAA7B,CAAmCQ,aAAnC,CAAiD,IAAjD,EAAuD,GAAvD;AACH;AACD;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;EAtTkDC,qB","sourcesContent":["import { ClientEngine, KeyboardControls } from 'lance-gg';\nimport SyncClient from '@ircam/sync/client';\nimport InterferenceRenderer from '../client/InterferenceRenderer';\nimport Performer from '../common/Performer';\nimport Egg from '../common/Egg';\nimport { Transport, Sequence, Synth, NoiseSynth, FMSynth } from 'tone';\nimport { Reverb, BitCrusher, AutoWah } from 'tone';\n\nconst durs = ['4n', '8n', '6n'];\nlet noteIndex = 0;\nlet rhythmIndex = 0;\nlet viewLock = false;\n\nexport default class InterferenceClientEngine extends ClientEngine {\n\n    /// INITIALIZATION AND CONNECTION\n    constructor(gameEngine, options) {\n        super(gameEngine, options, InterferenceRenderer);\n\n        this.syncClient = null;\n        this.transport = Transport;\n        this.player = null;\n        this.room = null;\n        this.players = [];\n        this.eggs = [];\n        this.eggSounds = {};\n        this.performanceView = false;\n        this.controls = new KeyboardControls(this);\n        this.prevState = 'setup';\n\n        this.gameEngine.on('client__postStep', this.stepLogic.bind(this));\n        this.gameEngine.on('eggBounce', e => { this.onEggBounce(e) });\n    }\n\n    start() {\n        super.start()\n\n        let btn = document.getElementById('startButton');\n        let roomNameInput = document.getElementById('roomNameInput');\n        let roomNameErrorText = document.querySelector('#startMenu .room-input-error');\n\n        btn.onclick = () => {\n            let regex = /^\\w+$/;\n            if (regex.exec(roomNameInput.value) !== null) {\n                this.assignToRoom(roomNameInput.value.substring(0, 20));\n            } else {\n                roomNameErrorText.style.display = 'inline';\n            }\n        };\n\n        // LOCAL CONTROLS\n        // Any inputs that do nothing server-side (i.e. doesn't need to be known by other players)\n        document.addEventListener('keypress', e => {\n            console.log(e.code);\n            if (document.activeElement === roomNameInput) {\n                if (e.code === 'Enter') {\n                    let regex = /^\\w+$/;\n                    if (regex.exec(roomNameInput.value) !== null) {\n                        this.assignToRoom(roomNameInput.value.substring(0, 20));\n                    } else {\n                        roomNameErrorText.style.display = 'inline';\n                    }\n                }\n            }\n            else {\n                if (e.code === 'Backquote') {\n                    if (this.transport.state !== 'started') {\n                        this.transport.start();\n                        this.transport.seconds = this.syncClient.getSyncTime();\n                        //this.sequencerLoop(0);\n                    }   \n                    else {\n                        this.transport.pause();\n                    }\n                }\n                else if (e.code === 'KeyV') {\n                    console.log('view');\n                    if (!viewLock) this.performanceView = !this.performanceView;\n                }\n                else if (e.code === 'Slash') {\n                    console.log('lock');\n                    viewLock = !viewLock;\n                }\n            }\n        });\n\n        //this.transport.timeSignature = 4;\n\n        this.reverb = new Reverb(1).toMaster();\n        this.reverb.generate();\n        this.bitcrusher = new BitCrusher(4).toMaster()\n        this.autowah = new AutoWah().connect(this.reverb);  \n\n        this.synth = new Synth({\n            oscillator: {\n                type: 'sine',\n                modulationFrequency: 0.2\n            },\n            envelope: {\n                attack: 0,\n                decay: 0.1,\n                sustain: 0,\n                release: 0.1,\n            }\n        }).toMaster();\n\n        // BUILDERS\n\n        // Tetris Chain\n        this.tetrisChainSynth = new Synth({\n            oscillator: {\n                type: 'triangle',\n                modulationFrequency: 0.2\n            },\n            envelope: {\n                attack: 0.1,\n                decay: 0.1,\n                sustain: 0.5,\n                release: 0.1,\n            }\n        }).toMaster();\n\n        this.tetrisChainSequence = new Sequence(function(time, note){\n            this.tetrisChainSynth.triggerAttackRelease(note, '16n', time);\n        }, [], \"8n\");\n \n        /*\n        // show try-again button\n        this.gameEngine.on('objectDestroyed', (obj) => {\n            if (obj.playerId === gameEngine.playerId) {\n                document.body.classList.add('lostGame');\n                document.querySelector('#tryAgain').disabled = false;\n            }\n        });\n        */\n        /*\n        this.mouseX = null;\n        this.mouseY = null;\n\n        document.addEventListener('mousemove', this.updateMouseXY.bind(this), false);\n        document.addEventListener('mouseenter', this.updateMouseXY.bind(this), false);\n        document.addEventListener('touchmove', this.updateMouseXY.bind(this), false);\n        document.addEventListener('touchenter', this.updateMouseXY.bind(this), false);\n        this.gameEngine.on('client__preStep', this.sendMouseAngle.bind(this));\n        */\n        \n        /*\n        // click event for \"try again\" button\n        document.querySelector('#tryAgain').addEventListener('click', () => {\n            this.socket.emit('requestRestart');\n        }); */\n        \n        /*\n        document.querySelector('#reconnect').addEventListener('click', () => {\n            window.location.reload();\n        }); */\n\n        //this.controls.bindKey('left', 'left', { repeat: true });\n        //this.controls.bindKey('right', 'right', { repeat: true });\n        //this.controls.bindKey('up', 'up', { repeat: true } );\n    }\n\n    connect(options = {}) {\n        return super.connect().then(() => {\n            this.socket.on('assignedRoom', roomName => { \n                this.room = roomName;\n                this.transport.start();\n                this.startSyncClient(this.socket);\n                this.startEffects();\n            });\n        });\n    }\n\n    startSyncClient(socket) {\n        const startTime = performance.now();\n        this.syncClient = new SyncClient(() => { return (performance.now() - startTime) / 1000 });\n        this.syncClient.start(\n            // send function\n            (pingId, clientPingTime) => {\n                var request = [];\n                request[0] = 0; // we send a ping\n                request[1] = pingId;\n                request[2] = clientPingTime;\n\n                //console.log('[ping] - id: %s, pingTime: %s', request[1], request[2]);\n\n                this.socket.emit('syncClientData', request);\n            },       \n            // receive function  \n            callback => {\n                // unpack args before executing the callback\n                this.socket.on('syncServerData', function (data) {\n                    var response = data;\n\n                    if (response[0] === 1) { // this is a pong\n                        var pingId = response[1];\n                        var clientPingTime = response[2];\n                        var serverPingTime = response[3];\n                        var serverPongTime = response[4];\n\n                        //console.log('[pong] - id: %s, clientPingTime: %s, serverPingTime: %s, serverPongTime: %s',\n                        //pingId, clientPingTime, serverPingTime, serverPongTime);\n\n                        callback(pingId, clientPingTime, serverPingTime, serverPongTime);\n                    }\n                });\n            }, \n            // status report function\n            status => { }//console.log(status); }\n        );\n    }\n\n    assignToRoom(roomName) {\n        if (this.socket) {\n            this.socket.emit('assignToRoom', roomName);\n            document.getElementById('startMenuWrapper').style.display = 'none';\n            // NETWORKED CONTROLS\n            // These inputs will also be processed on the server\n            console.log('binding keys');\n            //this.controls.bindKey('space', 'space');\n            this.controls.bindKey('open bracket', '[');\n            this.controls.bindKey('close bracket / å', ']');\n            this.controls.bindKey('n', 'n');\n            this.controls.bindKey('b', 'b'); // begin\n            this.controls.bindKey('c', 'c'); // change color\n        }\n    } \n\n    ///////////////////////////////////////////////////////////////////////////////////////////\n    /// SOUND HANDLING\n\n    stepLogic() {\n        if (this.room === null) return //if we yet to be assigned a room, don't do this stuff\n        this.player = this.gameEngine.world.queryObject({ playerId: this.gameEngine.playerId });\n        this.players = this.gameEngine.world.queryObjects({ instanceType: Performer });\n        this.eggs = this.gameEngine.world.queryObjects({ instanceType: Egg });\n        let stage = this.player.stage;\n        if (stage === 'setup') {\n\n        }\n        else if (stage === 'intro') {\n            if (this.transport.state !== 'started' && this.prevStage !== stage) {\n                this.transport.start();\n                this.transport.seconds = this.syncClient.getSyncTime();\n            }\n            for (let e of this.eggs) {\n                if (!Object.keys(this.eggSounds).includes(e.toString())) this.constructEggSounds(e);\n                let vol = 1 - (0.3 * Math.abs(this.player.number - Math.floor(e.position.x / this.gameEngine.playerWidth)));\n                if (vol < 0) vol = 0;\n                this.eggSounds[e.toString()].drone.volume.rampTo(vol, 0.1);\n            }\n        }\n        this.prevStage = stage;\n    }\n\n    onEggBounce(e) {\n        if (!Object.keys(this.eggSounds).includes(e.toString())) this.constructEggSounds(e);\n        let leftBound = this.player.number * this.gameEngine.playerWidth;\n        let rightBound = (this.player.number + 1) * this.gameEngine.playerWidth;\n        if (leftBound < e.position.x && e.position.x < rightBound) {\n            this.eggSounds[e.toString()].bounce.triggerAttackRelease('8n');\n        }\n    }\n\n    startEffects() {\n        //this.bitcrusher.start();\n    }\n\n    constructEggSounds(e) {\n        //console.log('making egg sounds');\n        console.log(e.toString());\n        this.eggSounds[e.toString()] = {\n            drone: new NoiseSynth({\n                noise: {\n                    type: 'pink',\n                },\n                envelope: {\n                    attack: 1,\n                    decay: 0.1,\n                    sustain: 1,\n                    release: 0.1,\n                }\n            }),\n            bounce: new NoiseSynth({\n                noise: {\n                    type: 'white',\n                },\n                envelope: {\n                    attack: 0.01,\n                    decay: 0.3,\n                    sustain: 0.1,\n                    release: 0.5,\n                }\n            })\n        };\n\n        this.eggSounds[e.toString()].drone.connect(this.autowah);\n        this.eggSounds[e.toString()].bounce.connect(this.autowah);\n        this.eggSounds[e.toString()].drone.triggerAttack('+0', 0.1);\n    }\n    /*\n    sequencerLoop(thisTime) {\n        this.rhythmstack = ['4n'];\n        console.log('step');\n        if (this.notestack.length && this.rhythmstack.length) {\n            if (noteIndex >= this.notestack.length) noteIndex = 0;\n            if (rhythmIndex >= this.rhythmstack.length) rhythmIndex = 0;\n            this.synth.triggerAttackRelease(this.notestack[noteIndex], '8n', thisTime)\n            this.transport.scheduleOnce(nextTime => { this.sequencerLoop(nextTime); }, \n                Transport.getSecondsAtTime(Transport.nextSubdivision(this.rhythmstack[rhythmIndex]))\n            );\n            noteIndex++;\n            rhythmIndex++;\n        }\n        else {\n            noteIndex = 0;\n            rhythmIndex = 0;\n            this.transport.scheduleOnce(nextTime => { this.sequencerLoop(nextTime) }, \n                Transport.getSecondsAtTime(Transport.nextSubdivision('1m'))\n            );\n        }\n    }\n    */\n    /*\n    updateMouseXY(e) {\n        e.preventDefault();\n        if (e.touches) e = e.touches.item(0);\n        this.mouseX = e.pageX;\n        this.mouseY = e.pageY;\n    }\n\n    sendMouseAngle() {\n        let player = this.gameEngine.world.queryObject({ playerId: this.gameEngine.playerId });\n        if (this.mouseY === null || player === null) return;\n\n        let mouseX = (this.mouseX - document.body.clientWidth/2) / this.zoom;\n        let mouseY = (this.mouseY - document.body.clientHeight/2) / this.zoom;\n        let dx = mouseY - player.position.y;\n        let dy = mouseX - player.position.x;\n        if (Math.sqrt(dx * dx + dy * dy) < 0.5) {\n            this.sendInput(this.gameEngine.directionStop, { movement: true });\n            return;\n        }\n\n        let angle = Math.atan2(dx, dy);\n        this.sendInput(angle, { movement: true });\n    }\n    */\n}\n"],"file":"InterferenceClientEngine.js"}