{"version":3,"sources":["../../src/client/InterferenceRenderer.js"],"names":["paletteTable","bg","c1","c2","c3","c4","transportSyncCount","game","client","ctx","w","h","time","players","playerId","thisPlayer","prevNotestack","prevRhythmstack","InterferenceRenderer","gameEngine","clientEngine","canvas","document","createElement","width","window","innerWidth","height","innerHeight","body","insertBefore","getElementById","getContext","lineWidth","addEventListener","setRendererSize","t","dt","room","syncClient","getSyncTime","world","queryObjects","instanceType","Performer","queryObject","palette","transport","state","transportSyncInterval","seconds","console","log","clearRect","save","drawField","fillStyle","font","fillText","position","restore","performanceView","n","length","p","i","number","x","y","fillRect","strokeStyle","strokeRect","notestack","c","push","charCodeAt","toNote","rhythmstack","split","f","drawCircle","foodRadius","radius","fill","beginPath","arc","Math","PI","stroke","closePath","moveTo","spaceWidth","spaceHeight","lineTo","Renderer"],"mappings":"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","sourcesContent":["import { Renderer, TwoVector } from 'lance-gg';\nimport Performer from '../common/Performer';\nimport Egg from '../common/Egg';\nimport { Frequency } from 'tone';\n\nconst paletteTable = {\n    'rain': {   \n        bg: '#3e2f5b', \n        c1: '#d7dedc',\n        c2: '#706563',\n        c3: '#457eac',\n        c4: '#748386' \n    },\n    'celeste': {   \n        bg: '#a5d8ff', \n        c1: '#ff8266',\n        c2: '#4381af',\n        c3: '#ac86b0',\n        c4: '#4b719c' \n    },\n    'pyre': {   \n        bg: '#a32323', \n        c1: '#2375a8',\n        c2: '#fbf6f7',\n        c3: '#f0ae62',\n        c4: '#011936' \n    },\n    'journey': {   \n        bg: '#fad68a', \n        c1: '#7f2819',\n        c2: '#a25a11',\n        c3: '#d5a962',\n        c4: '#fef8e8' \n    },\n    'kirby': {   \n        bg: '#a8c256', \n        c1: '#f4a4a7',\n        c2: '#e84c41',\n        c3: '#f9df6a',\n        c4: '#fa8334' \n    },\n    'default': {\n        bg: 'black',\n        c1: 'white',\n        c2: 'white',\n        c3: 'white',\n        c4: 'white'\n    }\n}\n\nlet transportSyncCount = 0;\nlet game = null;\nlet client = null;\nlet ctx = null;\nlet w = 0;\nlet h = 0;\nlet time = 0;\nlet players = []; \nlet playerId = 0;\nlet thisPlayer = null;\n\nlet prevNotestack = '';\nlet prevRhythmstack = '';\n\nlet bg = paletteTable['default'].bg;\nlet c1 = paletteTable['default'].c1;\nlet c2 = paletteTable['default'].c2;\nlet c3 = paletteTable['default'].c3;\nlet c4 = paletteTable['default'].c4;\n\nexport default class InterferenceRenderer extends Renderer {\n\n    constructor(gameEngine, clientEngine) {\n        super(gameEngine, clientEngine);\n\n        game = this.gameEngine;\n        client = this.clientEngine;\n\n        this.canvas = document.createElement('canvas');\n        w = this.canvas.width = window.innerWidth;\n        h = this.canvas.height = window.innerHeight;\n        document.body.insertBefore(this.canvas, document.getElementById('logo'));\n        ctx = this.ctx = this.canvas.getContext('2d');\n        this.ctx.lineWidth = 5;\n\n        window.addEventListener('resize', ()=>{ this.setRendererSize(); });\n    }\n\n    draw(t, dt) {\n        super.draw(t, dt);\n\n        if (client.room === null) return\n\n        time = client.syncClient.getSyncTime();\n        players = game.world.queryObjects({ instanceType: Performer });\n        playerId = game.playerId;\n        thisPlayer = game.world.queryObject({ playerId });\n\n        bg = paletteTable[thisPlayer.palette].bg;\n        c1 = paletteTable[thisPlayer.palette].c1;\n        c2 = paletteTable[thisPlayer.palette].c2;\n        c3 = paletteTable[thisPlayer.palette].c3;\n        c4 = paletteTable[thisPlayer.palette].c4;\n\n        if (client.transport.state === 'started') {\n            if (transportSyncCount >= game.transportSyncInterval) {\n                client.transport.seconds = time;\n                transportSyncCount = 0;\n                console.log(client.transport.state);\n            }\n            transportSyncCount++\n        }\n        \n        // Clear the canvas\n        ctx.clearRect(0, 0, w, h);\n\n        // Transform the canvas\n        // Note that we need to flip the y axis since Canvas pixel coordinates\n        // goes from top to bottom, while physics does the opposite.\n        ctx.save();\n        //ctx.scale(this.clientEngine.zoom, this.clientEngine.zoom);  // Zoom in and flip y axis\n        // Draw all things\n        this.drawField();\n        /*\n        if (this.gameEngine.playerId < 5) {\n            Tone.Transport.seconds = t/1000;\n            ctx.fillStyle = 'red';\n        } */\n        ctx.fillStyle = 'black';\n        ctx.font = \"20px Georgia\";\n        ctx.fillText(playerId, 50, 25);\n        ctx.fillText(time, 50, 50);\n        ctx.fillText(client.transport.position, 50, 75);\n\n        ctx.restore(); \n    }\n\n    drawField() {\n        if (client.performanceView) {\n\n\n        }\n        else {\n            let n = players.length;\n            for (let p of players) {\n                let i = p.number;\n                let x = (i / n) * w;\n                let y = (i / n) * h;\n                ctx.fillStyle = paletteTable[p.palette].bg;\n                ctx.fillRect(x, 0, w / n, h / n)\n            }\n            if (thisPlayer) {\n                let i = thisPlayer.number;\n                let x = (i / n) * w;\n                let y = (i / n) * h;\n                ctx.strokeStyle = 'black';\n                ctx.strokeRect(x, 0, w / n, h / n)   \n                if (thisPlayer.notestack !== prevNotestack) {\n                    client.notestack = [];\n                    for (let c = 0; c < thisPlayer.notestack.length; c++) {\n                        client.notestack.push(Frequency(thisPlayer.notestack.charCodeAt(c), 'midi').toNote());\n                    }\n                    prevNotestack = thisPlayer.notestack;\n                    console.log(client.notestack);\n                }\n                if (thisPlayer.rhythmstack !== prevRhythmstack) {\n                    client.rhythmstack = thisPlayer.rhythmstack.split(' ');\n                    prevRhythmstack = thisPlayer.rhythmstack;\n                    console.log(client.rhythmstack);\n                }\n            }\n        }\n    }\n\n    drawPerformers(p, t, dt) {\n        /*\n        this.drawCircle(x, y, game.headRadius, true);\n        for (let i = 0; i < p.bodyParts.length; i++) {\n            let nextPos = p.bodyParts[i];\n            if (isThisPerformer) ctx.fillStyle = this.rainbowColors();\n            this.drawCircle(nextPos.x, nextPos.y, game.bodyRadius, true);\n        }\n\n        // draw eyes\n        let angle = +w.direction;\n        if (w.direction === game.directionStop) {\n            angle = - Math.PI / 2;\n        }\n        let eye1 = new TwoVector(Math.cos(angle + game.eyeAngle), Math.sin(angle + game.eyeAngle));\n        let eye2 = new TwoVector(Math.cos(angle - game.eyeAngle), Math.sin(angle - game.eyeAngle));\n        eye1.multiplyScalar(game.eyeDist).add(w.position);\n        eye2.multiplyScalar(game.eyeDist).add(w.position);\n        ctx.fillStyle = 'black';\n        this.drawCircle(eye1.x, eye1.y, game.eyeRadius, true);\n        this.drawCircle(eye2.x, eye2.y, game.eyeRadius, true);\n        ctx.fillStyle = 'white';\n\n        // update status\n        if (isPerformer) {\n            document.getElementById('wiggle-length').innerHTML = 'Wiggle Length: ' + Math.floor(t) + ' ' + Math.floor(dt);\n        } */\n    }\n\n    setRendererSize() {\n        w = this.canvas.width = window.innerWidth;\n        h = this.canvas.height = window.innerHeight;\n    }\n\n    drawFood(f) {\n        ctx.strokeStyle = ctx.fillStyle = 'Orange';\n        this.drawCircle(f.position.x, f.position.y, game.foodRadius, true);\n        ctx.strokeStyle = ctx.fillStyle = 'White';\n    }\n\n    drawCircle(x, y, radius, fill) {\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, 2*Math.PI);\n        fill?ctx.fill():ctx.stroke();\n        ctx.closePath();\n    }\n\n    drawBounds() {\n        ctx.beginPath();\n        ctx.moveTo(-game.spaceWidth/2, -game.spaceHeight/2);\n        ctx.lineTo(-game.spaceWidth/2, game.spaceHeight/2);\n        ctx.lineTo( game.spaceWidth/2, game.spaceHeight/2);\n        ctx.lineTo( game.spaceWidth/2, -game.spaceHeight/2);\n        ctx.lineTo(-game.spaceWidth/2, -game.spaceHeight/2);\n        ctx.closePath();\n        ctx.stroke();\n    }\n\n}\n"],"file":"InterferenceRenderer.js"}