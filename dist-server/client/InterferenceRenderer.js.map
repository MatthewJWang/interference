{"version":3,"sources":["../../src/client/InterferenceRenderer.js"],"names":["paletteTable","bg","c1","c2","c3","c4","transportSyncCount","game","client","ctx","w","h","leftViewBound","rightViewBound","time","players","playerId","thisPlayer","eggs","prevNotestack","prevRhythmstack","InterferenceRenderer","gameEngine","clientEngine","canvas","document","createElement","width","window","innerWidth","height","innerHeight","body","insertBefore","getElementById","getContext","lineWidth","addEventListener","setRendererSize","t","dt","room","syncClient","getSyncTime","world","queryObject","performanceView","number","playerWidth","queryObjects","instanceType","Performer","length","Egg","palette","transport","state","transportSyncInterval","seconds","console","log","clearRect","save","updateClientSequencer","drawPlayers","drawEggs","fillStyle","font","fillText","position","restore","n","p","i","x","fillRect","triangle","leftBound","eggRadius","rightBound","e","strokeStyle","pos","gamePositionToCanvasPosition","y","circle","gameDistanceToCanvasDistance","notestack","c","push","charCodeAt","toNote","rhythmstack","split","gameX","gameY","canvasX","mapToRange","canvasY","playerHeight","gameDist","canvasDist","val","l1","h1","l2","h2","Math","floor","radius","beginPath","arc","PI","fill","stroke","closePath","x1","y1","x2","y2","x3","y3","moveTo","lineTo","Renderer"],"mappings":"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","sourcesContent":["import { Renderer, TwoVector } from 'lance-gg';\nimport Performer from '../common/Performer';\nimport Egg from '../common/Egg';\nimport { Frequency } from 'tone';\n\nconst paletteTable = {\n    'rain': {   \n        bg: '#3e2f5b', \n        c1: '#d7dedc',\n        c2: '#706563',\n        c3: '#457eac',\n        c4: '#748386' \n    },\n    'celeste': {   \n        bg: '#a5d8ff', \n        c1: '#ff8266',\n        c2: '#4381af',\n        c3: '#ac86b0',\n        c4: '#4b719c' \n    },\n    'pyre': {   \n        bg: '#a32323', \n        c1: '#2375a8',\n        c2: '#fbf6f7',\n        c3: '#f0ae62',\n        c4: '#011936' \n    },\n    'journey': {   \n        bg: '#fad68a', \n        c1: '#7f2819',\n        c2: '#a25a11',\n        c3: '#d5a962',\n        c4: '#fef8e8' \n    },\n    'kirby': {   \n        bg: '#a8c256', \n        c1: '#f4a4a7',\n        c2: '#e84c41',\n        c3: '#f9df6a',\n        c4: '#fa8334' \n    },\n    'default': {\n        bg: 'black',\n        c1: 'white',\n        c2: 'white',\n        c3: 'white',\n        c4: 'white'\n    }\n}\n\nlet transportSyncCount = 0;\nlet game = null;\nlet client = null;\nlet ctx = null;\nlet w = 0;\nlet h = 0;\nlet leftViewBound = 0; // bounds of area to be rendered in game coordinates\nlet rightViewBound = 0;\nlet time = 0;\nlet players = []; \nlet playerId = 0;\nlet thisPlayer = null;\nlet eggs = [];\n\nlet prevNotestack = '';\nlet prevRhythmstack = '';\n\nlet bg = paletteTable['default'].bg;\nlet c1 = paletteTable['default'].c1;\nlet c2 = paletteTable['default'].c2;\nlet c3 = paletteTable['default'].c3;\nlet c4 = paletteTable['default'].c4;\n\nexport default class InterferenceRenderer extends Renderer {\n\n    constructor(gameEngine, clientEngine) {\n        super(gameEngine, clientEngine);\n\n        game = this.gameEngine;\n        client = this.clientEngine;\n\n        this.canvas = document.createElement('canvas');\n        w = this.canvas.width = window.innerWidth;\n        h = this.canvas.height = window.innerHeight;\n        document.body.insertBefore(this.canvas, document.getElementById('logo'));\n        ctx = this.ctx = this.canvas.getContext('2d');\n        ctx.lineWidth = 5;\n\n        window.addEventListener('resize', ()=>{ this.setRendererSize(); });\n    }\n\n    draw(t, dt) {\n        super.draw(t, dt);\n\n        if (client.room === null) return\n\n        time = client.syncClient.getSyncTime();\n        playerId = game.playerId;\n        thisPlayer = game.world.queryObject({ playerId });\n        if (client.performanceView) {\n            players = [thisPlayer];\n            leftViewBound = thisPlayer.number * game.playerWidth;\n            rightViewBound = (thisPlayer.number + 1) * game.playerWidth;\n        }\n        else {\n            players = game.world.queryObjects({ instanceType: Performer });\n            leftViewBound = 0;\n            rightViewBound = players.length * game.playerWidth;\n        }\n        eggs = game.world.queryObjects({ instanceType: Egg });\n\n        bg = paletteTable[thisPlayer.palette].bg;\n        c1 = paletteTable[thisPlayer.palette].c1;\n        c2 = paletteTable[thisPlayer.palette].c2;\n        c3 = paletteTable[thisPlayer.palette].c3;\n        c4 = paletteTable[thisPlayer.palette].c4;\n\n        if (client.transport.state === 'started') {\n            if (transportSyncCount >= game.transportSyncInterval) {\n                client.transport.seconds = time;\n                transportSyncCount = 0;\n                console.log(client.transport.state);\n            }\n            transportSyncCount++\n        }\n        \n        // Clear the canvas\n        ctx.clearRect(0, 0, w, h);\n\n        // Transform the canvas\n        // Note that we need to flip the y axis since Canvas pixel coordinates\n        // goes from top to bottom, while physics does the opposite.\n        ctx.save();\n        //ctx.scale(this.clientEngine.zoom, this.clientEngine.zoom);  // Zoom in and flip y axis\n        // Draw all things\n        this.updateClientSequencer();\n        this.drawPlayers();\n        this.drawEggs();\n\n        /*\n        if (this.gameEngine.playerId < 5) {\n            Tone.Transport.seconds = t/1000;\n            ctx.fillStyle = 'red';\n        } */\n        ctx.fillStyle = c1;\n        ctx.font = \"20px Lucida Console\";\n        ctx.fillText(playerId, 50, 25);\n        ctx.fillText(time, 50, 50);\n        ctx.fillText(client.transport.position, 50, 75);\n\n        ctx.restore(); \n    }\n\n    drawPlayers() {\n        let n = players.length;\n        for (let p of players) {\n            let i = p.number - (leftViewBound / game.playerWidth);\n            let x = ((w / n) * i);\n            ctx.fillStyle = paletteTable[p.palette].bg;\n            ctx.fillRect(x, 0, w / n, h / n)\n        }\n        let i = thisPlayer.number;\n        let x = (w / n) * (i + 0.5);\n        ctx.fillStyle = 'white';\n        this.triangle(  x,                      (1.05 * h) / n, \n                        x - ((0.25 * w) / n),   (1.15 * h) / n,\n                        x + ((0.25 * w) / n),   (1.15 * h) / n );   \n    }\n\n    drawEggs() {\n        let leftBound = leftViewBound - game.eggRadius;\n        let rightBound = rightViewBound + game.eggRadius;\n        for (let e of eggs) {\n            if (leftBound < e.position.x && e.position.x < rightBound) {\n                ctx.fillStyle = 'white';\n                ctx.strokeStyle = 'black';\n                let pos = this.gamePositionToCanvasPosition(e.position.x, e.position.y)\n                this.circle(pos[0], pos[1], this.gameDistanceToCanvasDistance(game.eggRadius));\n            }\n        }\n    }\n\n    updateClientSequencer() {\n        if (thisPlayer) {\n            if (thisPlayer.notestack !== prevNotestack) {\n                client.notestack = [];\n                for (let c = 0; c < thisPlayer.notestack.length; c++) {\n                    client.notestack.push(Frequency(thisPlayer.notestack.charCodeAt(c), 'midi').toNote());\n                }\n                prevNotestack = thisPlayer.notestack;\n                console.log(client.notestack);\n            }\n            if (thisPlayer.rhythmstack !== prevRhythmstack) {\n                client.rhythmstack = thisPlayer.rhythmstack.split(' ');\n                prevRhythmstack = thisPlayer.rhythmstack;\n                console.log(client.rhythmstack);\n            }\n        }\n    }\n\n    drawPerformers(p, t, dt) {\n        /*\n        this.drawCircle(x, y, game.headRadius, true);\n        for (let i = 0; i < p.bodyParts.length; i++) {\n            let nextPos = p.bodyParts[i];\n            if (isThisPerformer) ctx.fillStyle = this.rainbowColors();\n            this.drawCircle(nextPos.x, nextPos.y, game.bodyRadius, true);\n        }\n\n        // draw eyes\n        let angle = +w.direction;\n        if (w.direction === game.directionStop) {\n            angle = - Math.PI / 2;\n        }\n        let eye1 = new TwoVector(Math.cos(angle + game.eyeAngle), Math.sin(angle + game.eyeAngle));\n        let eye2 = new TwoVector(Math.cos(angle - game.eyeAngle), Math.sin(angle - game.eyeAngle));\n        eye1.multiplyScalar(game.eyeDist).add(w.position);\n        eye2.multiplyScalar(game.eyeDist).add(w.position);\n        ctx.fillStyle = 'black';\n        this.drawCircle(eye1.x, eye1.y, game.eyeRadius, true);\n        this.drawCircle(eye2.x, eye2.y, game.eyeRadius, true);\n        ctx.fillStyle = 'white';\n\n        // update status\n        if (isPerformer) {\n            document.getElementById('wiggle-length').innerHTML = 'Wiggle Length: ' + Math.floor(t) + ' ' + Math.floor(dt);\n        } */\n    }\n\n    setRendererSize() {\n        w = this.canvas.width = window.innerWidth;\n        h = this.canvas.height = window.innerHeight;\n    }\n\n    gamePositionToCanvasPosition(gameX, gameY) {\n        let canvasX = this.mapToRange(gameX, leftViewBound, rightViewBound, 0, w);\n        let canvasY = this.mapToRange(gameY, 0, game.playerHeight, 0, h / players.length) \n        return [canvasX, canvasY];\n    }\n\n    gameDistanceToCanvasDistance(gameDist) {\n        let canvasDist = this.mapToRange(gameDist, 0, game.playerWidth, 0, w / players.length);\n        return canvasDist;\n    }\n\n    mapToRange(val, l1, h1, l2, h2) {\n        return Math.floor(l2 + (h2 - l2) * (val - l1) / (h1 - l1));\n    }\n\n    circle(x, y, radius) {\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, 2*Math.PI);\n        ctx.fill();\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    triangle(x1, y1, x2, y2, x3, y3) {\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.lineTo(x3, y3);\n        ctx.fill();\n        ctx.closePath();\n    }\n\n}\n"],"file":"InterferenceRenderer.js"}