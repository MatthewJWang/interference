{"version":3,"sources":["../../src/client/InterferenceRenderer.js"],"names":["paletteTable","bg","c1","c2","c3","c4","transportSyncCount","game","client","ctx","w","h","leftViewBound","rightViewBound","time","players","playerId","thisPlayer","graphicNotes","eggs","animFrames","eggBreak","prevNotestack","prevRhythmstack","InterferenceRenderer","gameEngine","clientEngine","canvas","document","createElement","width","window","innerWidth","height","innerHeight","body","insertBefore","getElementById","getContext","lineWidth","addEventListener","setRendererSize","t","dt","room","syncClient","getSyncTime","world","queryObject","performanceView","number","playerWidth","queryObjects","instanceType","Performer","length","Egg","palette","transport","state","transportSyncInterval","seconds","clearRect","save","updateClientSequencer","drawPlayers","drawNoteGraphics","drawEggs","fillStyle","font","fillText","position","restore","n","p","i","x","fillColor","fillRect","triangle","g","type","pos","playerCellToCanvasPosition","cell","y","c","step","currentStep","gameDistanceToCanvasDistance","cellWidth","cellHeight","leftBound","eggRadius","rightBound","e","strokeStyle","gamePositionToCanvasPosition","hp","circle","drawBrokenEgg","notestack","push","charCodeAt","toNote","console","log","rhythmstack","split","gameX","gameY","canvasX","mapToRange","canvasY","playerHeight","gameDist","canvasDist","cellX","cellY","playerCellWidth","val","l1","h1","l2","h2","Math","floor","radius","gap","beginPath","arc","PI","fill","stroke","which","closePath","x1","y1","x2","y2","x3","y3","moveTo","lineTo","Renderer"],"mappings":"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","sourcesContent":["import { Renderer, TwoVector } from 'lance-gg';\nimport Performer from '../common/Performer';\nimport Egg from '../common/Egg';\nimport { Frequency } from 'tone';\n\nconst paletteTable = {\n    'rain': {   \n        bg: '#3e2f5b', \n        c1: '#d7dedc',\n        c2: '#706563',\n        c3: '#457eac',\n        c4: '#748386' \n    },\n    'celeste': {   \n        bg: '#a5d8ff', \n        c1: '#ff8266',\n        c2: '#4381af',\n        c3: '#ac86b0',\n        c4: '#4b719c' \n    },\n    'pyre': {   \n        bg: '#a32323', \n        c1: '#2375a8',\n        c2: '#fbf6f7',\n        c3: '#f0ae62',\n        c4: '#011936' \n    },\n    'journey': {   \n        bg: '#fad68a', \n        c1: '#7f2819',\n        c2: '#a25a11',\n        c3: '#d5a962',\n        c4: '#fef8e8' \n    },\n    'kirby': {   \n        bg: '#a8c256', \n        c1: '#f4a4a7',\n        c2: '#e84c41',\n        c3: '#f9df6a',\n        c4: '#fa8334' \n    },\n    'default': {\n        bg: 'black',\n        c1: 'white',\n        c2: 'white',\n        c3: 'white',\n        c4: 'white'\n    }\n}\n\nlet transportSyncCount = 0;\nlet game = null;\nlet client = null;\nlet ctx = null;\nlet w = 0;\nlet h = 0;\nlet leftViewBound = 0; // bounds of area to be rendered in game coordinates\nlet rightViewBound = 0;\nlet time = 0;\nlet players = []; \nlet playerId = 0;\nlet thisPlayer = null;\nlet graphicNotes = [];\nlet eggs = [];\nlet animFrames = { eggBreak: 0 };\n\nlet prevNotestack = '';\nlet prevRhythmstack = '';\n\nlet bg = paletteTable['default'].bg;\nlet c1 = paletteTable['default'].c1;\nlet c2 = paletteTable['default'].c2;\nlet c3 = paletteTable['default'].c3;\nlet c4 = paletteTable['default'].c4;\n\nexport default class InterferenceRenderer extends Renderer {\n\n    constructor(gameEngine, clientEngine) {\n        super(gameEngine, clientEngine);\n\n        game = this.gameEngine;\n        client = this.clientEngine;\n\n        this.canvas = document.createElement('canvas');\n        w = this.canvas.width = window.innerWidth;\n        h = this.canvas.height = window.innerHeight;\n        document.body.insertBefore(this.canvas, document.getElementById('logo'));\n        ctx = this.ctx = this.canvas.getContext('2d');\n        ctx.lineWidth = 1;\n\n        window.addEventListener('resize', ()=>{ this.setRendererSize(); });\n    }\n\n    draw(t, dt) {\n        super.draw(t, dt);\n\n        if (client.room === null) return\n\n        time = client.syncClient.getSyncTime();\n        playerId = game.playerId;\n        thisPlayer = game.world.queryObject({ playerId });\n        if (client.performanceView) {\n            players = [thisPlayer];\n            leftViewBound = thisPlayer.number * game.playerWidth;\n            rightViewBound = (thisPlayer.number + 1) * game.playerWidth;\n        }\n        else {\n            players = game.world.queryObjects({ instanceType: Performer });\n            leftViewBound = 0;\n            rightViewBound = players.length * game.playerWidth;\n        }\n        graphicNotes = client.graphicNotes;\n        eggs = game.world.queryObjects({ instanceType: Egg });\n\n        bg = paletteTable[thisPlayer.palette].bg;\n        c1 = paletteTable[thisPlayer.palette].c1;\n        c2 = paletteTable[thisPlayer.palette].c2;\n        c3 = paletteTable[thisPlayer.palette].c3;\n        c4 = paletteTable[thisPlayer.palette].c4;\n\n        if (client.transport.state === 'started') {\n            if (transportSyncCount >= game.transportSyncInterval) {\n                client.transport.seconds = time;\n                transportSyncCount = 0;\n                //console.log(client.transport.state);\n            }\n            transportSyncCount++\n        }\n        \n        // Clear the canvas\n        ctx.clearRect(0, 0, w, h);\n\n        // Transform the canvas\n        // Note that we need to flip the y axis since Canvas pixel coordinates\n        // goes from top to bottom, while physics does the opposite.\n        ctx.save();\n        //ctx.scale(this.clientEngine.zoom, this.clientEngine.zoom);  // Zoom in and flip y axis\n        // Draw all things\n        this.updateClientSequencer();\n        this.drawPlayers();\n        this.drawNoteGraphics();\n        this.drawEggs();\n\n        /*\n        if (this.gameEngine.playerId < 5) {\n            Tone.Transport.seconds = t/1000;\n            ctx.fillStyle = 'red';\n        } */\n        ctx.fillStyle = c1;\n        ctx.font = \"20px Lucida Console\";\n        ctx.fillText(playerId, 50, 25);\n        ctx.fillText(time, 50, 50);\n        ctx.fillText(client.transport.position, 50, 75);\n\n        ctx.restore(); \n    }\n\n    drawPlayers() {\n        let n = players.length;\n        for (let p of players) {\n            let i = p.number - (leftViewBound / game.playerWidth);\n            let x = ((w / n) * i);\n            this.fillColor(p, 'bg');\n            ctx.fillRect(x, 0, w / n, h / n)\n        }\n        let i = thisPlayer.number;\n        let x = (w / n) * (i + 0.5);\n        ctx.fillStyle = 'white';\n        this.triangle(  x,                      (1.05 * h) / n, \n                        x - ((0.25 * w) / n),   (1.15 * h) / n,\n                        x + ((0.25 * w) / n),   (1.15 * h) / n );   \n    }\n\n    drawNoteGraphics() {\n        for (let g of graphicNotes) {\n            if (g.type === 'egg') {\n                let pos = this.playerCellToCanvasPosition(thisPlayer, g.cell.x, g.cell.y);\n                let c = 'c1';\n                if (g.step === client.currentStep) c = 'c2'\n                this.fillColor(thisPlayer, c);\n                ctx.fillRect(pos[0], pos[1], \n                    this.gameDistanceToCanvasDistance(game.cellWidth), \n                    this.gameDistanceToCanvasDistance(game.cellHeight));\n            }\n        }\n    }\n\n    drawEggs() {\n        let leftBound = leftViewBound - game.eggRadius;\n        let rightBound = rightViewBound + game.eggRadius;\n        for (let e of eggs) {\n            if (leftBound < e.position.x && e.position.x < rightBound) {\n                ctx.fillStyle = 'white';\n                ctx.strokeStyle = 'black';\n                let pos = this.gamePositionToCanvasPosition(e.position.x, e.position.y)\n                if (e.hp > 0) this.circle(pos[0], pos[1], this.gameDistanceToCanvasDistance(game.eggRadius));\n                else this.drawBrokenEgg(pos[0], pos[1], this.gameDistanceToCanvasDistance(game.eggRadius));\n            }\n        }\n    }\n\n    updateClientSequencer() {\n        if (thisPlayer) {\n            if (thisPlayer.notestack !== prevNotestack) {\n                client.notestack = [];\n                for (let c = 0; c < thisPlayer.notestack.length; c++) {\n                    client.notestack.push(Frequency(thisPlayer.notestack.charCodeAt(c), 'midi').toNote());\n                }\n                prevNotestack = thisPlayer.notestack;\n                console.log(client.notestack);\n            }\n            if (thisPlayer.rhythmstack !== prevRhythmstack) {\n                client.rhythmstack = thisPlayer.rhythmstack.split(' ');\n                prevRhythmstack = thisPlayer.rhythmstack;\n                console.log(client.rhythmstack);\n            }\n        }\n    }\n\n    drawPerformers(p, t, dt) {\n        /*\n        this.drawCircle(x, y, game.headRadius, true);\n        for (let i = 0; i < p.bodyParts.length; i++) {\n            let nextPos = p.bodyParts[i];\n            if (isThisPerformer) ctx.fillStyle = this.rainbowColors();\n            this.drawCircle(nextPos.x, nextPos.y, game.bodyRadius, true);\n        }\n\n        // draw eyes\n        let angle = +w.direction;\n        if (w.direction === game.directionStop) {\n            angle = - Math.PI / 2;\n        }\n        let eye1 = new TwoVector(Math.cos(angle + game.eyeAngle), Math.sin(angle + game.eyeAngle));\n        let eye2 = new TwoVector(Math.cos(angle - game.eyeAngle), Math.sin(angle - game.eyeAngle));\n        eye1.multiplyScalar(game.eyeDist).add(w.position);\n        eye2.multiplyScalar(game.eyeDist).add(w.position);\n        ctx.fillStyle = 'black';\n        this.drawCircle(eye1.x, eye1.y, game.eyeRadius, true);\n        this.drawCircle(eye2.x, eye2.y, game.eyeRadius, true);\n        ctx.fillStyle = 'white';\n\n        // update status\n        if (isPerformer) {\n            document.getElementById('wiggle-length').innerHTML = 'Wiggle Length: ' + Math.floor(t) + ' ' + Math.floor(dt);\n        } */\n    }\n\n    setRendererSize() {\n        w = this.canvas.width = window.innerWidth;\n        h = this.canvas.height = window.innerHeight;\n    }\n\n    gamePositionToCanvasPosition(gameX, gameY) {\n        let canvasX = this.mapToRange(gameX, leftViewBound, rightViewBound, 0, w);\n        let canvasY = this.mapToRange(gameY, 0, game.playerHeight, 0, h / players.length) \n        return [canvasX, canvasY];\n    }\n\n    gameDistanceToCanvasDistance(gameDist) {\n        let canvasDist = this.mapToRange(gameDist, 0, game.playerWidth, 0, w / players.length);\n        return canvasDist;\n    }\n\n    playerCellToCanvasPosition(p, cellX, cellY) {\n        let gameX = game.cellWidth * (cellX + (p.number * game.playerCellWidth));\n        let gameY = game.cellHeight * cellY;\n        return this.gamePositionToCanvasPosition(gameX, gameY);\n    }\n\n    mapToRange(val, l1, h1, l2, h2) {\n        return Math.floor(l2 + (h2 - l2) * (val - l1) / (h1 - l1));\n    }\n\n    drawBrokenEgg(x, y, radius) {\n        let gap = radius * (animFrames.eggBreak * 0.02);\n        ctx.beginPath();\n        ctx.arc(x-gap, y, radius, 0.25*Math.PI, 1.25*Math.PI);\n        ctx.fill();\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.arc(x+gap, y, radius, 1.25*Math.PI, 2.25*Math.PI);\n        ctx.fill();\n        ctx.stroke();\n\n        if (animFrames.eggBreak < 60) animFrames.eggBreak++\n    }\n\n    fillColor(p, which) {\n        if (paletteTable[p.palette]) {\n            ctx.fillStyle = paletteTable[p.palette][which];\n        }  \n        else ctx.fillStyle = paletteTable['default'][which];\n    }\n\n    circle(x, y, radius) {\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, 2*Math.PI);\n        ctx.fill();\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    triangle(x1, y1, x2, y2, x3, y3) {\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.lineTo(x3, y3);\n        ctx.fill();\n        ctx.closePath();\n    }\n\n}\n"],"file":"InterferenceRenderer.js"}